name: Integration tests
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    paths:
      - "backend/**"
      - "keycloak/**"
      - "kubernetes/**"
      - "preprocessing/**"
      - "website/**"
      - "deploy.py"
      - "integration-tests/**"
      - ".github/scripts/**"
      - ".github/workflows/**"
  push:
    branches:
      - main
jobs:
  integration-tests:
    # Skip regular test run if only the label was added
    if: github.event.action != 'labeled' || github.event.label.name == 'update-snapshots'
    permissions:
      packages: read
      contents: read
      checks: read
      actions: read # Required by workflow-telemetry-action
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser:
          - chromium
          - firefox
    timeout-minutes: 45
    env:
      sha: ${{ github.event.pull_request.head.sha || github.sha }}
      wait_timeout: ${{ github.ref == 'refs/heads/main' && 900 || 600 }}
    steps:
      - name: Check if updating snapshots
        id: check-update-snapshots
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.event.action }}" == "labeled" ]] && [[ "${{ github.event.label.name }}" == "update-snapshots" ]]; then
            echo "update_snapshots=true" >> $GITHUB_OUTPUT
          else
            echo "update_snapshots=false" >> $GITHUB_OUTPUT
          fi

      - name: Shorten sha
        run: echo "sha=${sha::7}" >> $GITHUB_ENV

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          lfs: true
      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
          k3d version
      - uses: azure/setup-helm@v4
        with:
          version: v3.18.3
      - name: Create k3d cluster
        run: |
          ./deploy.py --verbose cluster --bind-all
      - name: Deploy with Helm
        run: |
          ./deploy.py --verbose helm \
            --branch ${{ github.ref_name }} \
            --sha ${{ env.sha }} \
            --for-e2e \
            --enablePreprocessing \
            --use-localhost-ip
      - uses: actions/setup-node@v5
        with:
          node-version-file: ./website/.nvmrc
      - name: Cache .npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('integration-tests/**/package-lock.json') }}
      - name: Install dependencies
        run: cd integration-tests && npm ci
      - name: Install Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install CLI
        run: cd cli && uv sync && uv build && pip install dist/*.whl
      - name: Install keyring backend for CLI
        run: pip install keyrings.alt
      - name: Get Installed Playwright Version
        id: playwright-version
        run: cd integration-tests && echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_ENV
      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers and System Dependencies
        run: cd integration-tests && npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Install only System Dependencies
        run: cd website && npx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit == 'true'
      - name: Wait for the pods to be ready
        run: ./.github/scripts/wait_for_pods_to_be_ready.py --timeout ${{ env.wait_timeout }}
      - name: Sleep for 10 secs
        run: sleep 10
      - name: Run Integration test
        env:
          BROWSER: ${{ matrix.browser }}
          CHECK_SNAPSHOTS: true
        run: |
          set -o pipefail
          UPDATE_FLAG=""
          if [[ "${{ steps.check-update-snapshots.outputs.update_snapshots }}" == "true" ]]; then
            UPDATE_FLAG="--update-snapshots"
          fi
          cd integration-tests && npx playwright test --workers=4 $UPDATE_FLAG 2>&1 | tee output.txt
          EXIT_CODE=$?
          echo '```' >> $GITHUB_STEP_SUMMARY
          sed -n '/Running [0-9]\+ tests/,$p' output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit $EXIT_CODE

      - name: Upload updated snapshots
        if: steps.check-update-snapshots.outputs.update_snapshots == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: snapshots-${{ matrix.browser }}
          path: integration-tests/tests/**/*-snapshots/*.png
          retention-days: 1
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: integration-tests/playwright-report/
          retention-days: 30
      - name: List running pods
        if: ${{ !cancelled() }}
        run: kubectl get pods --all-namespaces
      - name: Describe pods
        if: ${{ !cancelled() }}
        run: kubectl describe pods -l app=loculus
      - name: Show events
        if: ${{ !cancelled() }}
        run: kubectl get events
      - name: Save logs from all containers to file
        if: ${{ !cancelled() }}
        run: ./.github/scripts/collect_kubernetes_logs.sh
      - name: Upload Kubernetes logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-logs-${{ matrix.browser }}
          path: kubernetes_logs/

  commit-snapshots:
    if: github.event.label.name == 'update-snapshots'
    needs: integration-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          lfs: true

      - name: Download all snapshot artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: snapshots-*
          path: snapshots-temp
          merge-multiple: true

      - name: Copy snapshots to repository
        run: |
          if [ -d "snapshots-temp" ]; then
            rsync -av snapshots-temp/ integration-tests/tests/
            rm -rf snapshots-temp
          fi

      - name: Commit updated snapshots
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(integration-tests): update visual regression snapshots"
          file_pattern: "integration-tests/tests/**/*-snapshots/*.png"
