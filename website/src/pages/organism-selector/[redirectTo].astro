---
import { getOrganismStatisticsMap } from '../../components/IndexPage/getOrganismStatistics';
import { NeedAGroup } from '../../components/common/NeedAGroup.tsx';
import NeedToLogin from '../../components/common/NeedToLogin.astro';
import { getConfiguredOrganisms, getWebsiteConfig } from '../../config';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { routes } from '../../routes/routes';
import { GroupManagementClient } from '../../services/groupManagementClient';
import { getAccessToken } from '../../utils/getAccessToken';

type ValidRedirectTo = 'submission' | 'search';

const purposes: Partial<Record<ValidRedirectTo, string>> = {
    search: 'to browse data',
};
if (getWebsiteConfig().enableSubmissionPages) {
    purposes.submission = 'to access the submission portal';
}

if (Astro.params.redirectTo === undefined || !(Astro.params.redirectTo in purposes)) {
    return Astro.rewrite('/404');
}
const redirectTo = Astro.params.redirectTo as ValidRedirectTo;

const accessToken = getAccessToken(Astro.locals.session)!;
const groupsResult = await GroupManagementClient.create().getGroupsOfUser(accessToken);

const myRoutes = {
    submission: routes.submissionPageWithoutGroup,
    search: routes.searchPage,
};
const purpose = purposes[redirectTo];

Astro.response.headers.append('Cache-Control', 'no-cache, no-store, must-revalidate');
Astro.response.headers.append('Pragma', 'no-cache');
Astro.response.headers.append('Expires', '0');

const requiresLogin = redirectTo === 'submission';
const requiresGroup = redirectTo === 'submission';

const numberDaysAgoStatistics = 30;
const configuredOrganisms = getConfiguredOrganisms();
const organismStatisticsMap = await getOrganismStatisticsMap(
    configuredOrganisms.map((o) => o.key),
    numberDaysAgoStatistics,
);
---

<BaseLayout title='Select Organism'>
    <div class='max-w-7xl mx-auto'>
        {
            !accessToken && requiresLogin ? (
                <NeedToLogin message={`You need to be logged in to an account ${purpose}.`} />
            ) : requiresGroup && (!groupsResult.isOk() || groupsResult.value.length === 0) ? (
                <NeedAGroup />
            ) : (
                <section class='py-4'>
                    <div class='rounded-xl bg-base-100 border border-base-200/70 border-l-4 border-l-primary/30 px-6 py-4 my-5'>
                        <h1 class='text-2xl font-semibold text-slate-900 tracking-tight'>Choose an organism</h1>
                        <p class='text-slate-600 mt-1'>Select the organism for which you want {purpose}.</p>
                    </div>

                    <div class='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-6'>
                        {configuredOrganisms.map(({ key, displayName, image }) => {
                            const stats = organismStatisticsMap.get(key);
                            return (
                                <a
                                    href={myRoutes[redirectTo](key)}
                                    class='group block rounded-2xl border border-base-200/70 bg-base-100 p-6 hover:shadow-[0_4px_12px_rgba(0,0,0,0.08)] transition-colors duration-150 focus:outline-none focus-visible:ring-2 focus-visible:ring-primary/40 no-underline hover:no-underline'
                                >
                                    <div class='flex items-start justify-between gap-4 min-w-0'>
                                        <div class='flex items-start gap-4 min-w-0'>
                                            {image && (
                                                <img
                                                    src={image}
                                                    alt={displayName}
                                                    class='h-14 w-14 rounded-full object-cover ring-2 ring-primary/20 group-hover:ring-primary/30 transition-colors'
                                                />
                                            )}
                                            <h3 class='text-lg font-medium text-slate-900 leading-6 whitespace-normal break-words pr-2'>
                                                {displayName}
                                            </h3>
                                        </div>
                                        <div class='text-primary/70 text-2xl transition-transform duration-150 group-hover:translate-x-0.5 flex-shrink-0'>
                                            →
                                        </div>
                                    </div>
                                    {redirectTo === 'search' && (
                                        <div class='mt-4 text-slate-600'>
                                            <span class='text-xl font-semibold text-primary'>
                                                {stats?.totalSequences ?? '—'}
                                            </span>
                                            <span class='ml-2 text-xs text-slate-500'>total sequences</span>
                                        </div>
                                    )}
                                </a>
                            );
                        })}
                    </div>
                </section>
            )
        }
    </div>
</BaseLayout>
