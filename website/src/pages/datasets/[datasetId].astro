---
import { AuthorDetails } from '../../components/DatasetCitations/AuthorDetails';
import { DatasetItem } from '../../components/DatasetCitations/DatasetItem';
import { DatasetItemActions } from '../../components/DatasetCitations/DatasetItemActions';
import { ErrorFeedback } from '../../components/ErrorFeedback';
import { getRuntimeConfig } from '../../config';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { DatasetCitationClient } from '../../services/datasetCitationClient.ts';
import type { Dataset } from '../../types/datasetCitation';
import { getAccessToken } from '../../utils/getAccessToken';

const clientConfig = getRuntimeConfig().public;
const session = Astro.locals.session;
const accessToken = getAccessToken(session)!;
const { datasetId = '' } = Astro.params;
const version = Astro.url.searchParams.get('version')! || '1';
const username = session?.user?.username;

const datasetClient = DatasetCitationClient.create();

const datasetResponse = (await datasetClient.call('getDataset', {
    params: { datasetId, version },
})) as any;

const datasetRecordsResponse = (await datasetClient.call('getDatasetRecords', {
    params: { datasetId, version },
})) as any;

const datasetCitedByResponse = (await datasetClient.call('getDatasetCitedBy', {
    params: { datasetId, version },
})) as any;

const getDatasetByVersion = (datasetVersions: Dataset[], version: string) => {
    const matchedVersion = datasetVersions.find((obj) => {
        return obj.datasetVersion === parseInt(version, 10);
    });
    if (matchedVersion === undefined) {
        return datasetVersions[datasetVersions.length - 1];
    }
    return matchedVersion;
};

const dataset = datasetResponse.value !== undefined ? getDatasetByVersion(datasetResponse.value, version) : undefined;

const authorResponse = dataset !== undefined ? await datasetClient.getAuthor(dataset.createdBy) : undefined;
---

<BaseLayout title='Datasets' data-testid='datasets-item-container'>
    <div class='flex flex-col justify-center max-w-7xl'>
        {
            dataset !== undefined ? (
                <div class='flex flex-row items-left'>
                    <div class='w-1/5 flex flex-col justify-start items-center'>
                        {authorResponse !== undefined
                            ? authorResponse.match(
                                  (authorProfile) => (
                                      <AuthorDetails
                                          displayFullDetails={false}
                                          firstName={authorProfile.firstName}
                                          lastName={authorProfile.lastName}
                                      />
                                  ),
                                  (error) => (
                                      <ErrorFeedback
                                          message={'Error while fetching author profile: ' + JSON.stringify(error)}
                                          client:load
                                      />
                                  ),
                              )
                            : null}
                    </div>
                    <div class='w-4/5 pl-6'>
                        {datasetRecordsResponse.value !== undefined ? (
                            <DatasetItemActions
                                clientConfig={clientConfig}
                                accessToken={accessToken}
                                dataset={dataset}
                                datasetRecords={datasetRecordsResponse.value}
                                isAdminView={dataset.createdBy === username}
                                client:only='react'
                            />
                        ) : (
                            <ErrorFeedback
                                message={
                                    'Error while fetching dataset records: ' +
                                    JSON.stringify(datasetRecordsResponse.error)
                                }
                                client:only='react'
                            />
                        )}
                        {datasetRecordsResponse.value !== undefined && datasetCitedByResponse.value !== undefined ? (
                            <DatasetItem
                                clientConfig={clientConfig}
                                accessToken={accessToken}
                                dataset={dataset}
                                datasetRecords={datasetRecordsResponse.value}
                                citedByData={datasetCitedByResponse.value}
                                isAdminView={dataset.createdBy === username}
                                client:load
                            />
                        ) : (
                            <ErrorFeedback
                                message={
                                    'Error while fetching dataset citations: ' +
                                    JSON.stringify(datasetCitedByResponse.error)
                                }
                                client:only='react'
                            />
                        )}
                    </div>
                </div>
            ) : (
                <ErrorFeedback
                    message={'Error while fetching dataset: ' + JSON.stringify(datasetResponse.error)}
                    client:only='react'
                />
            )
        }
    </div>
</BaseLayout>
