---
import { findOrganismAndData } from './findOrganismAndData';
import { SequenceDetailsTableResultType } from './getSequenceDetailsTableData';
import RevocationEntryDataTable from '../../../components/SequenceDetailsPage/RevocationEntryDataTable.astro';
import { SequenceDataUI } from '../../../components/SequenceDetailsPage/SequenceDataUI.tsx';
import SequencesBanner from '../../../components/SequenceDetailsPage/SequencesBanner.tsx';
import SequencesDataTableTitle from '../../../components/SequenceDetailsPage/SequencesDataTableTitle.astro';
import ErrorBox from '../../../components/common/ErrorBox.tsx';
import { getSchema, getRuntimeConfig, getReferenceGenomesSequenceNames } from '../../../config';
import { getWebsiteConfig } from '../../../config';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { type Group } from '../../../types/backend';
import { getAccessToken } from '../../../utils/getAccessToken';
import { getMyGroups } from '../../../utils/getMyGroups';

const accessionVersion = Astro.params.accessionVersion!;

const sequenceDetailsTableData = await findOrganismAndData(accessionVersion);

if (
    sequenceDetailsTableData.isOk() &&
    sequenceDetailsTableData.value.result.type === SequenceDetailsTableResultType.REDIRECT
) {
    return Astro.redirect(sequenceDetailsTableData.value.result.redirectUrl);
}

const session = Astro.locals.session;
const accessToken = getAccessToken(session);
const clientConfig = getRuntimeConfig().public;

let myGroups: Group[] = [];

if (accessToken !== undefined) {
    myGroups = await getMyGroups(accessToken);
}

const sequenceFlaggingConfig = getWebsiteConfig().sequenceFlagging;
---

<BaseLayout
    title={sequenceDetailsTableData.isOk() ? accessionVersion : 'Sequence not found'}
    implicitOrganism={sequenceDetailsTableData.isOk() ? sequenceDetailsTableData.value.organism : undefined}
>
    {
        sequenceDetailsTableData.isOk() &&
            sequenceDetailsTableData.value.result.type === SequenceDetailsTableResultType.TABLE_DATA && (
                <div slot='banner'>
                    <SequencesBanner
                        sequenceEntryHistory={sequenceDetailsTableData.value.result.sequenceEntryHistory}
                        accessionVersion={accessionVersion}
                    />
                </div>
            )
    }
    {
        sequenceDetailsTableData.match(
            ({ organism, result }) => {
                const showDownloadAndReport =
                    result.type === SequenceDetailsTableResultType.TABLE_DATA && !result.isRevocation;
                return (
                    <>
                        <SequencesDataTableTitle
                            accessionVersion={accessionVersion}
                            sequenceEntryHistory={
                                result.type === SequenceDetailsTableResultType.TABLE_DATA
                                    ? result.sequenceEntryHistory
                                    : undefined
                            }
                            showDownload={showDownloadAndReport}
                        />
                        {result.type === SequenceDetailsTableResultType.TABLE_DATA &&
                            (result.isRevocation ? (
                                <RevocationEntryDataTable
                                    tableData={result.tableData}
                                    dataUseTermsHistory={result.dataUseTermsHistory}
                                    referenceGenomeSequenceNames={getReferenceGenomesSequenceNames(organism)}
                                />
                            ) : (
                                <SequenceDataUI
                                    tableData={result.tableData}
                                    organism={organism}
                                    referenceGenomeSequenceNames={getReferenceGenomesSequenceNames(organism)}
                                    accessionVersion={accessionVersion}
                                    dataUseTermsHistory={result.dataUseTermsHistory}
                                    schema={getSchema(organism)}
                                    clientConfig={clientConfig}
                                    myGroups={myGroups}
                                    accessToken={accessToken}
                                    sequenceFlaggingConfig={showDownloadAndReport ? sequenceFlaggingConfig : undefined}
                                    client:load
                                />
                            ))}
                    </>
                );
            },
            () => (
                <ErrorBox title='Sequence entry not found'>
                    No data found for accession version {accessionVersion}
                </ErrorBox>
            ),
        )
    }
</BaseLayout>
