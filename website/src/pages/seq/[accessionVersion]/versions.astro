---
import { sentenceCase } from 'change-case';

import ErrorBox from '../../../components/common/ErrorBox.astro';
import { getConfiguredOrganisms } from '../../../config';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { routes } from '../../../routes';
import { LapisClient } from '../../../services/lapisClient';
import {
    extractAccessionVersion,
    getAccessionVersionString,
    parseAccessionVersionFromString,
} from '../../../utils/extractAccessionVersion';
import { getVersionStatusColor } from '../../../utils/getVersionStatusColor';

const accessionVersion = Astro.params.accessionVersion!;

const { accession } = parseAccessionVersionFromString(accessionVersion);

const organisms = getConfiguredOrganisms();
const promises = organisms.map(async ({ key }) => {
    const lapisClient = LapisClient.createForOrganism(key);

    const versionListResult = await lapisClient.getAllSequenceEntryHistoryForAccession(accession);
    return {
        organism: key,
        result: versionListResult,
    };
});

const queries = await Promise.all(promises);
let versionListResult = queries[0].result;
let organism: string | undefined;

for (const query of queries) {
    if (query.result.isOk()) {
        versionListResult = query.result!;
        organism = query.organism!;
        break;
    }
}
---

<BaseLayout title={accession + ' versions'} implicitOrganism={organism}>
    <div class='flex flex-row pb-2'>
        <h1 class='title'>Versions for accession {accession}</h1>
    </div>

    <ul class='p-3'>
        {
            versionListResult.match(
                (list) => {
                    return list.map((version) => (
                        <li class='mb-4'>
                            <div class='flex flex-row gap-3 justify-start'>
                                <a
                                    href={routes.sequencesDetailsPage(
                                        getAccessionVersionString(extractAccessionVersion(version)),
                                    )}
                                >
                                    {getAccessionVersionString(extractAccessionVersion(version))}
                                </a>

                                <p class={`font-bold ${getVersionStatusColor(version.versionStatus)}`}>
                                    ({sentenceCase(version.versionStatus)})
                                </p>
                            </div>
                        </li>
                    ));
                },
                (error) => {
                    return <ErrorBox title='Request for sequence history failed' message={error.detail} />;
                },
            )
        }
    </ul>
</BaseLayout>
