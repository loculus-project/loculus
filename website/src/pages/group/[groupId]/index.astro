---
import { GroupPage } from '../../../components/User/GroupPage';
import ErrorBox from '../../../components/common/ErrorBox.tsx';
import { getConfiguredOrganisms, getRuntimeConfig, getWebsiteConfig } from '../../../config';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { GroupManagementClient } from '../../../services/groupManagementClient';
import { getAccessToken } from '../../../utils/getAccessToken';

const session = Astro.locals.session!;
const accessToken = getAccessToken(session);
const username = session.user?.username ?? '';
const groupId = parseInt(Astro.params.groupId!, 10);
const clientConfig = getRuntimeConfig().public;
const organisms = getConfiguredOrganisms();
const databaseName = getWebsiteConfig().name;

if (isNaN(groupId)) {
    return new Response(undefined, {
        status: 404,
    });
}

const groupManagementClient = GroupManagementClient.create();
const groupDetailsResult = await groupManagementClient.getGroupDetails(accessToken, groupId);
const userGroups = accessToken
    ? (await groupManagementClient.getGroupsOfUser(accessToken)).match(
          (groups) => groups,
          () => [],
      )
    : [];
---

<BaseLayout
    title={groupDetailsResult.match(
        (groupDetails) => groupDetails.group.groupName,
        () => 'Group error',
    )}
>
    {
        groupDetailsResult.match(
            (groupDetails) => (
                <GroupPage
                    prefetchedGroupDetails={groupDetails}
                    accessToken={accessToken}
                    clientConfig={clientConfig}
                    username={username}
                    userGroups={userGroups}
                    organisms={organisms}
                    databaseName={databaseName}
                    client:load
                />
            ),
            () => <ErrorBox>Failed to fetch group details, sorry for the inconvenience!</ErrorBox>,
        )
    }
</BaseLayout>
