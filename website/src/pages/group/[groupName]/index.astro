---
import { GroupPage } from '../../../components/User/GroupPage';
import ErrorBox from '../../../components/common/ErrorBox.astro';
import NeedToLogin from '../../../components/common/NeedToLogin.astro';
import { getRuntimeConfig } from '../../../config';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { GroupManagementClient } from '../../../services/groupManagementClient';
import { getAccessToken } from '../../../utils/getAccessToken';

const session = Astro.locals.session!;
const accessToken = getAccessToken(session)!;
const username = session.user?.username ?? '';
const groupName = Astro.params.groupName!;
const clientConfig = getRuntimeConfig().public;

const groupManagementClient = GroupManagementClient.create();
const groupDetailsResult = await groupManagementClient.getGroupDetails(accessToken, groupName);
const userGroupsResponse = await groupManagementClient.getGroupsOfUser(accessToken);
const userGroupNames = userGroupsResponse.match(
    (groups) => groups.map((group) => group.groupName),
    () => [],
);
---

<BaseLayout title='Group'>
    {
        !accessToken ? (
            <NeedToLogin message='You need to be logged in to view group information.' />
        ) : (
            groupDetailsResult.match(
                (groupDetails) => (
                    <GroupPage
                        prefetchedGroupDetails={groupDetails}
                        accessToken={accessToken}
                        clientConfig={clientConfig}
                        username={username}
                        groupName={groupName}
                        userGroupNames={userGroupNames}
                        client:load
                    />
                ),
                () => <ErrorBox>Failed to fetch group details, sorry for the inconvenience!</ErrorBox>,
            )
        )
    }
</BaseLayout>
