---
import { cleanOrganism } from '../../../components/Navigation/cleanOrganism';
import { NeedAGroup } from '../../../components/common/NeedAGroup.tsx';
import NeedToLogin from '../../../components/common/NeedToLogin.astro';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { routes } from '../../../routes/routes';
import { GroupManagementClient } from '../../../services/groupManagementClient';
import { getAccessToken } from '../../../utils/getAccessToken';
import F7Arrow2Circlepath from '~icons/f7/arrow-2-circlepath';
import GgCheckO from '~icons/gg/check-o';
import IcOutlineUpload from '~icons/ic/outline-upload';
import MdiViewListOutline from '~icons/mdi/view-list-outline';

const { organism } = cleanOrganism(Astro.params.organism);
const accessToken = getAccessToken(Astro.locals.session)!;
const groupsResult = await GroupManagementClient.create().getGroupsOfUser(accessToken);

const options = [
    {
        title: 'Submit',
        description: 'Upload new sequences.',
        route: routes.submitPage(organism!.key),
        icon: IcOutlineUpload,
    },
    {
        title: 'Revise',
        description: 'Upload revisions for existing sequences.',
        route: routes.revisePage(organism!.key),
        icon: F7Arrow2Circlepath,
    },
    {
        title: 'Review',
        description: 'Review your unreleased submissions.',
        route: routes.userSequenceReviewPage(organism!.key),
        icon: GgCheckO,
    },
    {
        title: 'View',
        description: "View your group's released sequences.",
        route: routes.mySequencesWithoutGroup(organism!.key),
        icon: MdiViewListOutline,
    },
];

// Prevent caching to allow back button after user creates group
Astro.response.headers.append('Cache-Control', 'no-cache, no-store, must-revalidate');
Astro.response.headers.append('Pragma', 'no-cache');
Astro.response.headers.append('Expires', '0');
---

<BaseLayout title='Submit'>
    <h1 class='title'>Submission portal for {organism!.displayName}</h1>

    {
        !accessToken ? (
            <NeedToLogin message='You need to be logged in to access the submission portal.' />
        ) : !groupsResult.isOk() || groupsResult.value.length === 0 ? (
            <NeedAGroup />
        ) : (
            <div class='max-w-2xl mx-auto p-8'>
                <div class='flex flex-wrap'>
                    {options.map((option) => (
                        <a
                            href={option.route}
                            class='block rounded border border-gray-300 p-8 m-2 w-64 text-center hover:bg-gray-100 hover:no-underline'
                        >
                            <h3 class='font-semibold text-gray-700 mb-3'>
                                <option.icon className='inline-block w-5 h-5 mr-1.5' />
                                {option.title}
                            </h3>
                            <p class='text-gray-700 text-sm'>{option.description}</p>
                        </a>
                    ))}
                </div>
            </div>
        )
    }
</BaseLayout>
