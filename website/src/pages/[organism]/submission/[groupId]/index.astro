---
import SubmissionPageWrapper from '../../../../components/Submission/SubmissionPageWrapper.astro';
import { routes } from '../../../../routes/routes';
import { BackendClient } from '../../../../services/backendClient';
import { createAuthorizationHeader } from '../../../../utils/createAuthorizationHeader';
import { getAccessToken } from '../../../../utils/getAccessToken';
import { getGroupsAndCurrentGroup } from '../../../../utils/submissionPages';
import F7Arrow2Circlepath from '~icons/f7/arrow-2-circlepath';
import GgCheckO from '~icons/gg/check-o';
import IcOutlineUpload from '~icons/ic/outline-upload';
import MdiViewListOutline from '~icons/mdi/view-list-outline';

const session = Astro.locals.session!;
const organism = Astro.params.organism!;
const accessToken = getAccessToken(session)!;

const groupsResult = await getGroupsAndCurrentGroup(Astro.params, Astro.locals.session);

async function getSequenceCounts(organism: string, groupId: number) {
    const backendClient = BackendClient.create();
    try {
        const response = await backendClient.call('getSequences', {
            params: { organism },
            headers: createAuthorizationHeader(accessToken),
            queries: {
                groupIdsFilter: groupId.toString(),
                // We only need the counts, so we can set the page and size to 0
                // to avoid fetching the actual sequences (slow part of the endpoint)
                page: 0,
                size: 0,
            },
        });

        if (response.isErr()) {
            throw new Error('Failed to fetch sequences');
        }

        const statusCounts = response.value.statusCounts;
        const { APPROVED_FOR_RELEASE, ...others } = statusCounts;

        const othersTotal = Object.values(others).reduce((sum: number, count) => sum + count, 0);
        const approvedTotal = APPROVED_FOR_RELEASE || 0;
        return { othersTotal, approvedTotal };
    } catch (_) {
        return { othersTotal: -1, approvedTotal: -1 };
    }
}
---

<SubmissionPageWrapper title='Submission portal' groupsResult={groupsResult}>
    {
        groupsResult.match(
            async ({ currentGroup: group }) => {
                const { othersTotal, approvedTotal } = await getSequenceCounts(organism, group.groupId);

                const options = [
                    {
                        title: 'Submit',
                        description: 'Upload new sequences.',
                        route: routes.submitPage(organism, group.groupId),
                        icon: IcOutlineUpload,
                    },
                    {
                        title: 'Revise',
                        description: 'Upload revisions for existing sequences.',
                        route: routes.revisePage(organism, group.groupId),
                        icon: F7Arrow2Circlepath,
                    },
                    {
                        title: 'Review',
                        description: "Review your group's unreleased submissions.",
                        route: routes.userSequenceReviewPage(organism, group.groupId),
                        icon: GgCheckO,
                        count: othersTotal,
                        countClass: 'text-primary-600 font-semibold',
                        countType: 'awaiting review',
                    },
                    {
                        title: 'View',
                        description: "View your group's released sequences.",
                        route: routes.mySequencesPage(organism, group.groupId),
                        icon: MdiViewListOutline,
                        count: approvedTotal,
                        countClass: 'text-gray-500 hidden',
                    },
                ];

                return (
                    <div class='max-w-2xl mx-auto p-8'>
                        <div class='flex flex-wrap'>
                            {options.map((option) => (
                                <a
                                    href={option.route}
                                    class='block rounded border border-gray-300 p-8 m-2 w-64 text-center hover:bg-gray-100 hover:no-underline'
                                >
                                    <h3 class='font-semibold text-gray-700 mb-3'>
                                        <option.icon className='inline-block w-5 h-5 mr-1.5' />
                                        {option.title}
                                    </h3>
                                    <p class='text-gray-700 text-sm'>{option.description}</p>
                                    {option.count !== undefined && option.count > 0 && (
                                        <p class={`text-sm mt-2 ${option.countClass || ''}`}>
                                            {option.count} sequences{' '}
                                            {option.countType !== undefined ? option.countType : ''}
                                        </p>
                                    )}
                                </a>
                            ))}
                        </div>
                    </div>
                );
            },
            () => undefined,
        )
    }
</SubmissionPageWrapper>
