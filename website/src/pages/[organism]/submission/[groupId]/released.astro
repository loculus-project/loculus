---
import { EditDataUseTermsButton } from '../../../../components/DataUseTerms/EditDataUseTermsButton';
import { SearchForm } from '../../../../components/SearchPage/SearchForm';
import { SearchPagination } from '../../../../components/SearchPage/SearchPagination';
import { Table } from '../../../../components/SearchPage/Table';
import SubmissionPageWrapper from '../../../../components/Submission/SubmissionPageWrapper.astro';
import ErrorBox from '../../../../components/common/ErrorBox.astro';
import { MY_SEQUENCES } from '../../../../routes/routes';
import { LapisClient } from '../../../../services/lapisClient.ts';
import { pageSize } from '../../../../settings';
import { getAccessToken } from '../../../../utils/getAccessToken';
import { processParametersAndFetchSearch } from '../../../../utils/processParametersAndFetchSearch';
import { combineSearchFilters } from '../../../../utils/search';
import { getGroupsAndCurrentGroup } from '../../../../utils/submissionPages';

const accessToken = getAccessToken(Astro.locals.session);
const groupsResult = await getGroupsAndCurrentGroup(Astro.params, Astro.locals.session);
if (groupsResult.isErr()) {
    return new Response(undefined, { status: groupsResult.error.status });
}
const { currentGroup: group } = groupsResult.value;

const {
    organism,
    data,
    page,
    metadataFilter,
    accessionFilter,
    mutationFilter,
    referenceGenomesSequenceNames,
    schema,
    clientConfig,
    orderBy,
} = await processParametersAndFetchSearch(Astro, group.groupId);

const lapisClient = LapisClient.createForOrganism(organism);
const searchFilters = combineSearchFilters(metadataFilter, mutationFilter, accessionFilter);
searchFilters.DataUseTerms = 'RESTRICTED';
const detailsResult = await lapisClient.call('details', {
    fields: ['accessionVersion', 'dataUseTermsRestrictedUntil'],
    ...searchFilters,
});
let restrictedAccessions: string[] = [];
let earliestRestrictionDate: string = '9999-01-01';
detailsResult.match(
    (sequenceData) => {
        restrictedAccessions = sequenceData.data.map((seq) => {
            if (seq.dataUseTermsRestrictedUntil < earliestRestrictionDate) {
                earliestRestrictionDate = seq.dataUseTermsRestrictedUntil;
            }
            return String(seq.accessionVersion).split('.')[0];
        });
    },
    () => {
        /* access only occurs if data is valid */
    },
);

---

<SubmissionPageWrapper title='Released sequences' groupsResult={groupsResult}>
    <div class='flex flex-col md:flex-row gap-8 md:gap-4'>
        <div class='md:w-72'>
            <SearchForm
                organism={organism}
                filters={metadataFilter}
                initialAccessionFilter={accessionFilter}
                initialMutationFilter={mutationFilter}
                clientConfig={clientConfig}
                referenceGenomesSequenceNames={referenceGenomesSequenceNames}
                classOfSearchPage={MY_SEQUENCES}
                groupId={group.groupId}
                client:load
            />
        </div>
        {
            data.match(
                (data) => (
                    <div class='flex-1'>
                        <div class='text-sm text-gray-800 mb-6 justify-between flex px-6 items-baseline'>
                            <div class='mt-auto'>
                                Search returned {data.totalCount.toLocaleString()}
                                sequence{data.totalCount === 1 ? '' : 's'}
                            </div>
                            {restrictedAccessions.length > 0 && (
                                <div>
                                    <EditDataUseTermsButton
                                        accessToken={accessToken!}
                                        clientConfig={clientConfig}
                                        accessions={restrictedAccessions}
                                        dataUseTerms={{
                                            type: 'RESTRICTED',
                                            restrictedUntil: earliestRestrictionDate,
                                        }}
                                        client:load
                                    />
                                </div>
                            )}
                        </div>
                        <Table
                            organism={organism}
                            data={data.data}
                            schema={schema}
                            metadataFilter={metadataFilter}
                            accessionFilter={accessionFilter}
                            mutationFilter={mutationFilter}
                            page={page}
                            orderBy={orderBy}
                            classOfSearchPage={MY_SEQUENCES}
                            groupId={group.groupId}
                            client:load
                        />

                        <div class='mt-4 flex justify-center'>
                            <SearchPagination
                                client:only='react'
                                count={Math.ceil(data.totalCount / pageSize)}
                                page={page}
                                metadataFilter={metadataFilter}
                                accessionFilter={accessionFilter}
                                mutationFilter={mutationFilter}
                                orderBy={orderBy}
                                organism={organism}
                                classOfSearchPage={MY_SEQUENCES}
                                groupId={group.groupId}
                            />
                        </div>
                    </div>
                ),
                (error) => <ErrorBox title='Failed searching sequences'>{error.detail}</ErrorBox>,
            )
        }
    </div>
</SubmissionPageWrapper>
