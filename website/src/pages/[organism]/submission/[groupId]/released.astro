---
import { SearchFullUI } from '../../../../components/SearchPage/SearchFullUI';
import SubmissionPageWrapper from '../../../../components/Submission/SubmissionPageWrapper.astro';
import { MY_SEQUENCES } from '../../../../routes/routes';
import { processParametersAndFetchSearch } from '../../../../utils/processParametersAndFetchSearch';
import { getGroupsAndCurrentGroup } from '../../../../utils/submissionPages';
const groupsResult = await getGroupsAndCurrentGroup(Astro.params, Astro.locals.session);
if (groupsResult.isErr()) {
    return new Response(undefined, { status: groupsResult.error.status });
}
const { currentGroup: group } = groupsResult.value;

const props = await processParametersAndFetchSearch(Astro, group.groupId);
let theData = null;
let theError = null;
props.data.match(
    (data) => {
        theData = data;
        theError = null;
    },
    (err) => {
        theData = null;
        theError = err;
    },
);
---

<SubmissionPageWrapper groupsResult={groupsResult} title='Released sequences'>
    <SearchFullUI
        client:load
        data={theData}
        error={theError}
        classOfSearchPage={MY_SEQUENCES}
        filters={props.metadataFilter}
        initialAccessionFilter={props.accessionFilter}
        initialMutationFilter={props.mutationFilter}
        organism={props.organism}
        referenceGenomesSequenceNames={props.referenceGenomesSequenceNames}
        clientConfig={props.clientConfig}
        orderBy={props.orderBy}
        lapisUrl={props.lapisUrl}
        schema={props.schema}
        page={props.page}
        metadataFilter={props.metadataFilter}
        accessionFilter={props.accessionFilter}
        mutationFilter={props.mutationFilter}
        groupId={group.groupId}
        metadataFilterWithoutHiddenFilters={props.metadataFilterWithoutHiddenFilters}
        myGroups={props.myGroups}
        accessToken={props.accessToken}
    />
</SubmissionPageWrapper>
