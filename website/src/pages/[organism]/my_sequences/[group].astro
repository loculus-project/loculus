---
import { MySequencesGroupSelector } from '../../../components/MySequencesPage/MySequencesGroupSelector';
import { SearchForm } from '../../../components/SearchPage/SearchForm';
import { SearchPagination } from '../../../components/SearchPage/SearchPagination';
import { Table } from '../../../components/SearchPage/Table';
import ErrorBox from '../../../components/common/ErrorBox.astro';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { MY_SEQUENCES } from '../../../routes/routes';
import { GroupManagementClient } from '../../../services/groupManagementClient';
import { pageSize } from '../../../settings';
import { getAccessToken } from '../../../utils/getAccessToken';
import { processParametersAndFetchSearch } from '../../../utils/processParametersAndFetchSearch';

const group = Astro.params.group!;
const accessToken = getAccessToken(Astro.locals.session)!;
const groupsResult = await GroupManagementClient.create().getGroupsOfUser(accessToken);
if (groupsResult.isOk() === false) {
    return new Response(undefined, {
        status: 500,
        message: 'Failed to get groups',
    });
}
const groups = groupsResult.value;

const groupNames = groups.map((group: { groupName: string }) => group.groupName);
const groupExists = groupNames.includes(group);
if (groupExists === false) {
    return new Response(undefined, {
        status: 404,
    });
}

const {
    cleanedOrganism,
    organism,
    data,
    page,
    metadataFilter,
    accessionFilter,
    mutationFilter,
    referenceGenomesSequenceNames,
    schema,
    clientConfig,
    orderBy,
} = await processParametersAndFetchSearch(Astro, group);
---

<BaseLayout title={`${cleanedOrganism.displayName} - My sequences`}>
    <h1 class='title'>Viewing sequences for group {group}</h1>
    {
        groupNames.length > 1 && (
            <>
                Choose group:
                <MySequencesGroupSelector
                    groupNames={groupNames}
                    selectedGroupName={group}
                    organism={organism}
                    client:load
                />
            </>
        )
    }

    <div class='flex flex-col md:flex-row gap-8 md:gap-4'>
        <div class='md:w-72'>
            <SearchForm
                organism={organism}
                filters={metadataFilter}
                initialAccessionFilter={accessionFilter}
                initialMutationFilter={mutationFilter}
                clientConfig={clientConfig}
                referenceGenomesSequenceNames={referenceGenomesSequenceNames}
                classOfSearchPage={MY_SEQUENCES}
                group={group}
                client:only='react'
            />
        </div>
        {
            data.match(
                (data) => (
                    <div class='flex-1'>
                        <div class='mt-4 mb-1'>
                            Search returned {data.totalCount.toLocaleString()}
                            sequence{data.totalCount === 1 ? '' : 's'}
                        </div>
                        <Table
                            organism={organism}
                            data={data.data}
                            schema={schema}
                            metadataFilter={metadataFilter}
                            accessionFilter={accessionFilter}
                            mutationFilter={mutationFilter}
                            page={page}
                            orderBy={orderBy}
                            classOfSearchPage={MY_SEQUENCES}
                            group={group}
                            client:load
                        />

                        <div class='mt-4 flex justify-center'>
                            <SearchPagination
                                client:only='react'
                                count={Math.ceil(data.totalCount / pageSize)}
                                page={page}
                                metadataFilter={metadataFilter}
                                accessionFilter={accessionFilter}
                                mutationFilter={mutationFilter}
                                orderBy={orderBy}
                                organism={organism}
                                classOfSearchPage={MY_SEQUENCES}
                                group={group}
                            />
                        </div>
                    </div>
                ),
                (error) => <ErrorBox title='Failed searching sequences'>{error.detail}</ErrorBox>,
            )
        }
    </div>
</BaseLayout>
