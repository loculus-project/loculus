---
import { getData, getReferenceGenomesSequenceNames, getMetadataFilters, getMutationFilter, getOrderBy } from './browse';
import { DownloadDialog } from '../../../components/BrowsePage/DownloadDialog/DownloadDialog';
import { Pagination } from '../../../components/BrowsePage/Pagination';
import { SearchForm } from '../../../components/BrowsePage/SearchForm';
import { Table } from '../../../components/BrowsePage/Table';
import { cleanOrganism } from '../../../components/Navigation/cleanOrganism';
import ErrorBox from '../../../components/common/ErrorBox.astro';
import { getLapisUrl, getRuntimeConfig, getSchema } from '../../../config';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { pageSize } from '../../../settings';

const organism = Astro.params.organism!;
const { organism: cleanedOrganism } = cleanOrganism(organism);
const schema = getSchema(organism);
const clientConfig = getRuntimeConfig().public;
const lapisUrl = getLapisUrl(clientConfig, organism);
const getSearchParams = (field: string): string => {
    return Astro.url.searchParams.get(field) ?? '';
};

const metadataFilter = getMetadataFilters(getSearchParams, organism);
const mutationFilter = getMutationFilter(Astro.url.searchParams);

const pageParam = Astro.url.searchParams.get('page');
const page = pageParam !== null ? Number.parseInt(pageParam, 10) : 1;
const offset = (page - 1) * pageSize;
const orderBy = getOrderBy(Astro.url.searchParams);

const referenceGenomesSequenceNames = getReferenceGenomesSequenceNames(organism);

const data = await getData(organism, metadataFilter, mutationFilter, offset, pageSize, orderBy);
---

<BaseLayout title={`${cleanedOrganism!.displayName} - Browse`}>
    <h1 class='title'>Browse</h1>
    <div class='flex flex-col md:flex-row gap-8 md:gap-4'>
        <div class='md:w-72'>
            <SearchForm
                organism={organism}
                filters={metadataFilter}
                initialMutationFilter={mutationFilter}
                clientConfig={clientConfig}
                referenceGenomesSequenceNames={referenceGenomesSequenceNames}
                client:only='react'
            />
        </div>
        {
            data.match(
                (data) => (
                    <div class='flex-1'>
                        <DownloadDialog
                            metadataFilter={metadataFilter}
                            mutationFilter={mutationFilter}
                            referenceGenomesSequenceNames={referenceGenomesSequenceNames}
                            lapisUrl={lapisUrl}
                            client:load
                        />
                        <div class='mt-4 mb-1'>
                            Search returned {data.totalCount.toLocaleString()}
                            sequence{data.totalCount === 1 ? '' : 's'}
                        </div>
                        <Table
                            organism={organism}
                            data={data.data}
                            schema={schema}
                            metadataFilter={metadataFilter}
                            mutationFilter={mutationFilter}
                            page={page}
                            orderBy={orderBy}
                            client:load
                        />

                        <div class='mt-4 flex justify-center'>
                            <Pagination client:only='react' count={Math.ceil(data.totalCount / pageSize)} />
                        </div>
                    </div>
                ),
                (error) => <ErrorBox title='Failed searching sequences' message={error.detail} />,
            )
        }
    </div>
</BaseLayout>
