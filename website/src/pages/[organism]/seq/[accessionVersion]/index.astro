---
import { getSequenceDetailsTableData, SequenceDetailsTableResultType } from './getSequenceDetailsTableData';
import RevocationEntryDataTable from '../../../../components/SequenceDetailsPage/RevocationEntryDataTable.astro';
import SequencesBanner from '../../../../components/SequenceDetailsPage/SequencesBanner.astro';
import SequencesDataTableTitle from '../../../../components/SequenceDetailsPage/SequencesDataTableTitle.astro';
import SequencesDataPage from '../../../../components/SequenceDetailsPage/SequencesDetailsPage.astro';
import { isRevocationEntry } from '../../../../components/SequenceDetailsPage/getTableData';
import ErrorBox from '../../../../components/common/ErrorBox.astro';
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import { routes } from '../../../../routes';

const accessionVersion = Astro.params.accessionVersion!;
const organism = Astro.params.organism!;

const sequenceDetailsTableData = await getSequenceDetailsTableData(accessionVersion, organism);

if (
    sequenceDetailsTableData.isOk() &&
    sequenceDetailsTableData.value.type === SequenceDetailsTableResultType.REDIRECT
) {
    return Astro.redirect(sequenceDetailsTableData.value.redirectUrl);
}
---

<BaseLayout title={accessionVersion}>
    {
        sequenceDetailsTableData.isOk() &&
            sequenceDetailsTableData.value.type === SequenceDetailsTableResultType.TABLE_DATA && (
                <div slot='banner'>
                    <SequencesBanner
                        sequenceEntryHistory={sequenceDetailsTableData.value.sequenceEntryHistory}
                        accessionVersion={accessionVersion}
                        organism={organism}
                    />
                </div>
            )
    }

    <SequencesDataTableTitle
        accessionVersion={accessionVersion}
        organism={organism}
        sequenceEntryHistory={sequenceDetailsTableData.isOk() &&
        sequenceDetailsTableData.value.type === SequenceDetailsTableResultType.TABLE_DATA
            ? sequenceDetailsTableData.value.sequenceEntryHistory
            : undefined}
    />

    {
        sequenceDetailsTableData.match(
            (data) =>
                data.type === SequenceDetailsTableResultType.TABLE_DATA &&
                (isRevocationEntry(data.tableData) ? (
                    <RevocationEntryDataTable
                        tableData={data.tableData}
                        dataUseTermsHistory={data.dataUseTermsHistory}
                    />
                ) : (
                    <SequencesDataPage
                        tableData={data.tableData}
                        organism={organism}
                        accessionVersion={accessionVersion}
                        dataUseTermsHistory={data.dataUseTermsHistory}
                    />
                )),
            () => (
                <>
                    <ErrorBox title='Sequence entry not found' message='No data found for accession version' />
                    <div>
                        Click
                        <a class='underline' href={routes.searchPage(organism, [])}>
                            here
                        </a>
                        to search for a different sequence.
                    </div>
                </>
            ),
        )
    }
</BaseLayout>
