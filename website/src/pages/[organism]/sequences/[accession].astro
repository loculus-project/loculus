---
import { getTableData } from './getTableData';
import { BackButton } from '../../../components/Navigation/BackButton';
import { SequencesContainer } from '../../../components/SequenceDetailsPage/SequencesContainer';
import ErrorBox from '../../../components/common/ErrorBox.astro';
import { getConfig, getReferenceGenomes, getRuntimeConfig } from '../../../config';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { routes } from '../../../routes';
import { LapisClient } from '../../../services/lapisClient';

const schema = getConfig();
const runtimeConfig = getRuntimeConfig();
// accession is never undefined, but ESLint doesn't know that
// eslint-disable-next-line
const accession = Astro.params.accession!;
const organism = Astro.params.organism!;

const tableData = await getTableData(accession, schema, LapisClient.create());

const genes = getReferenceGenomes().genes.map((g) => g.name);
---

<BaseLayout title={accession}>
    <div class='flex items-center'>
        <BackButton marginRight={2} client:load />
        <h1 class='title'>Sequence Entry {accession}</h1>
        {
            tableData.isOk() && (
                <a href={routes.versionPage(organism, accession)} class='text-xs ml-10'>
                    (See previous versions)
                </a>
            )
        }
    </div>
    {
        tableData.match(
            (tableData) => (
                <>
                    <div class='mt-10'>
                        <table class='table-auto'>
                            <tbody>
                                {tableData.map(({ label, value }) => (
                                    <tr>
                                        <td class='font-semibold pr-4 align-top'>{label}:</td>
                                        <td class='break-normal'>{value}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    <div class='mt-10'>
                        <SequencesContainer
                            client:load
                            accessionVersion={accession}
                            schema={schema}
                            clientConfig={runtimeConfig.forClient}
                            genes={genes}
                        />
                    </div>
                </>
            ),
            (error) => <ErrorBox title='Sequence entry not found' message={error.detail} />,
        )
    }
</BaseLayout>
