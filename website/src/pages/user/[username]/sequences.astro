---
import { getUserSequences, ResponseStatus, splitStatusArray } from './user';
import { ErrorFeedback } from '../../../components/ErrorFeedback';
import { BackButton } from '../../../components/Navigation/BackButton';
import { SequenceStatusBox } from '../../../components/UserSequenceList/SequenceStatusBox';
import { SequencesProcessed } from '../../../components/UserSequenceList/SequencesProcessed';
import { SequencesReady } from '../../../components/UserSequenceList/SequencesReady';
import { SequencesReceived } from '../../../components/UserSequenceList/SequencesReceived';
import { SequencesRevoked } from '../../../components/UserSequenceList/SequencesRevoked';
import { SequencesWithReview } from '../../../components/UserSequenceList/SequencesWithReview';
import { getRuntimeConfig } from '../../../config';
import BaseLayout from '../../../layouts/BaseLayout.astro';

// accession is never undefined, but ESLint doesn't know that
// eslint-disable-next-line
const username = Astro.params.username!;

const keyPrefix = `userSequences.${username}`;
const { sequences, responseStatus } = await getUserSequences(username);
const statusArray = splitStatusArray(sequences);

const clientConfig = getRuntimeConfig().forClient;
---

<BaseLayout title='Sequences'>
    <>
        <div class='flex items-center'>
            <BackButton marginRight={2} client:load />
            <h1 class='subtitle'>{`Submitted sequences of user ${username}`}</h1>
        </div>
        {
            responseStatus === ResponseStatus.ERROR ? (
                <ErrorFeedback message='Error while fetching user sequences' client:only='react' />
            ) : (
                <div class='flex flex-col gap-2 mt-5'>
                    <SequenceStatusBox
                        count={statusArray.RECEIVED.length}
                        description='received'
                        localStorageKey={`${keyPrefix}.receivedExpanded`}
                        client:only='react'
                    >
                        <SequencesReceived sequences={statusArray.RECEIVED} client:only='react' />
                    </SequenceStatusBox>

                    <SequenceStatusBox
                        count={statusArray.PROCESSING.length}
                        description='in processing'
                        localStorageKey={`${keyPrefix}.processingExpanded`}
                        client:only='react'
                    >
                        <SequencesReceived sequences={statusArray.PROCESSING} client:load />
                    </SequenceStatusBox>

                    <SequenceStatusBox
                        count={statusArray.NEEDS_REVIEW.length}
                        description='need(s) review'
                        localStorageKey={`${keyPrefix}.needsReviewExpanded`}
                        client:only='react'
                    >
                        <SequencesWithReview sequences={statusArray.NEEDS_REVIEW} username={username} client:load />
                    </SequenceStatusBox>

                    <SequenceStatusBox
                        count={statusArray.REVIEWED.length}
                        description='reviewed'
                        localStorageKey={`${keyPrefix}.reviewedExpanded`}
                        client:only='react'
                    >
                        <SequencesWithReview sequences={statusArray.REVIEWED} username={username} client:load />
                    </SequenceStatusBox>

                    <SequenceStatusBox
                        count={statusArray.PROCESSED.length}
                        description='processed'
                        localStorageKey={`${keyPrefix}.stagingExpanded`}
                        client:only='react'
                    >
                        <SequencesProcessed sequences={statusArray.PROCESSED} username={username} client:load />
                    </SequenceStatusBox>

                    <SequenceStatusBox
                        count={statusArray.SILO_READY.length}
                        description='ready for SILO import'
                        localStorageKey={`${keyPrefix}.readyExpanded`}
                        client:only='react'
                    >
                        <SequencesReady clientConfig={clientConfig} sequences={statusArray.SILO_READY} client:load />
                    </SequenceStatusBox>

                    <SequenceStatusBox
                        count={statusArray.REVOKED_STAGING.length}
                        description='staged for revocation'
                        localStorageKey={`${keyPrefix}.revokedExpanded`}
                        client:only='react'
                    >
                        <SequencesRevoked
                            clientConfig={clientConfig}
                            sequences={statusArray.REVOKED_STAGING}
                            username={username}
                            client:load
                        />
                    </SequenceStatusBox>
                </div>
            )
        }
    </>
</BaseLayout>
