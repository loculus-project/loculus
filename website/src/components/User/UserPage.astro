---
import { ListOfGroupsOfUser } from './ListOfGroupsOfUser.tsx';
import { getRuntimeConfig } from '../../config';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getKeycloakClient } from '../../middleware/authMiddleware';
import { routes } from '../../routes';
import { GroupManagementClient } from '../../services/groupManagementClient';
import { getAccessToken } from '../../utils/getAccessToken';
import ErrorBox from '../common/ErrorBox.astro';

const session = Astro.locals.session;
const user = session.user!; // page only accessible if user is logged in
const username = user.username!; // all users must have a username
const name = user.name;

const accessToken = getAccessToken(Astro.locals.session)!;

const clientConfig = getRuntimeConfig().public;

const organism: string | undefined = Astro.params.organism;

const logoutUrl = new URL(Astro.request.url);
logoutUrl.pathname = routes.logout();

const keycloakLogoutUrl = (await getKeycloakClient()).endSessionUrl({
    post_logout_redirect_uri: logoutUrl.href,
});

const groupOfUsersResult = await GroupManagementClient.create().getGroupsOfUser(accessToken);
---

<BaseLayout title='My account'>
    <div class='flex items-center'>
        <h1 class='title'>{name} ({username})</h1>
    </div>
    <div class='my-2 mx-4'>
        <a href={keycloakLogoutUrl}>Logout</a>
    </div>
    {
        organism !== undefined && (
            <>
                <div class='my-2 mx-4'>
                    <a href={routes.userSequencesPage(organism)}>Sequence Overview</a>
                </div>
                <div class='my-2 mx-4'>
                    <a href={routes.userSequenceReviewPage(organism)}>Sequence Review</a>
                </div>
                <div class='my-2 mx-4'>
                    <a href={routes.mySequencesWithoutGroup(organism)}>My sequences</a>
                </div>
            </>
        )
    }
    <div class='my-2 mx-4'>
        <a href={routes.datasetsPage(username)}>Datasets Overview</a>
    </div>

    <div class='my-2 mx-4'>
        <a href={routes.createGroup()}>Create a new Group</a>
    </div>

    <div class='subtitle py-4'>Groups</div>
    {
        groupOfUsersResult.match(
            (groups) => (
                <ListOfGroupsOfUser
                    accessToken={accessToken}
                    clientConfig={clientConfig}
                    username={username}
                    groupsOfUser={groups}
                    client:load
                />
            ),
            (error) => <ErrorBox title='Failed loading list of groups' message={error.detail} />,
        )
    }
</BaseLayout>
