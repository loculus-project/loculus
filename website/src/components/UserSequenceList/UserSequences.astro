---
import { SequenceEntryTable } from './SequenceEntryTable';
import { SequenceStatusBox } from './SequenceStatusBox';
import { getRuntimeConfig } from '../../config';
import type { SequenceEntryStatus } from '../../types/backend';
import { getAccessToken } from '../../utils/getAccessToken';

interface Props {
    sequenceEntries: SequenceEntryStatus[];
}

const organism = Astro.params.organism!;
const accessToken = getAccessToken(Astro.locals.session)!;

const { sequenceEntries } = Astro.props;
const clientConfig = getRuntimeConfig().public;

const statusArray = sequenceEntries.reduce(
    (acc, item) => {
        acc[item.status].push(item);
        return acc;
    },
    {
        RECEIVED: [] as SequenceEntryStatus[],
        IN_PROCESSING: [] as SequenceEntryStatus[],
        HAS_ERRORS: [] as SequenceEntryStatus[],
        AWAITING_APPROVAL: [] as SequenceEntryStatus[],
        APPROVED_FOR_RELEASE: [] as SequenceEntryStatus[],
        AWAITING_APPROVAL_FOR_REVOCATION: [] as SequenceEntryStatus[],
    },
);
---

<div class='flex flex-col gap-2 mt-5'>
    <SequenceStatusBox
        count={statusArray.RECEIVED.length}
        description='received'
        localStorageKey='userSequences.receivedExpanded'
        client:only='react'
    >
        <SequenceEntryTable
            organism={organism}
            accessToken={accessToken}
            sequenceEntries={statusArray.RECEIVED}
            bulkActionNames={['delete']}
            singleActionNames={[]}
            clientConfig={clientConfig}
            client:load
        />
    </SequenceStatusBox>

    <SequenceStatusBox
        count={statusArray.IN_PROCESSING.length}
        description='in processing'
        localStorageKey='userSequences.processingExpanded'
        client:only='react'
    >
        <SequenceEntryTable
            organism={organism}
            accessToken={accessToken}
            sequenceEntries={statusArray.IN_PROCESSING}
            bulkActionNames={[]}
            singleActionNames={[]}
            clientConfig={clientConfig}
            client:load
        />
    </SequenceStatusBox>

    <SequenceStatusBox
        count={statusArray.HAS_ERRORS.length}
        description={`${statusArray.HAS_ERRORS.length === 1 ? 'has' : 'have'} errors`}
        localStorageKey='userSequences.needsReviewExpanded'
        client:only='react'
    >
        <SequenceEntryTable
            organism={organism}
            accessToken={accessToken}
            sequenceEntries={statusArray.HAS_ERRORS}
            bulkActionNames={['delete']}
            singleActionNames={['edit']}
            clientConfig={clientConfig}
            client:load
        />
    </SequenceStatusBox>

    <SequenceStatusBox
        count={statusArray.AWAITING_APPROVAL.length}
        description='processed'
        localStorageKey='userSequences.stagingExpanded'
        client:only='react'
    >
        <SequenceEntryTable
            organism={organism}
            accessToken={accessToken}
            sequenceEntries={statusArray.AWAITING_APPROVAL}
            bulkActionNames={['approve', 'delete']}
            singleActionNames={['edit']}
            clientConfig={clientConfig}
            client:load
        />
    </SequenceStatusBox>

    <SequenceStatusBox
        count={statusArray.APPROVED_FOR_RELEASE.length}
        description='ready for SILO import'
        localStorageKey='userSequences.readyExpanded'
        client:only='react'
    >
        <SequenceEntryTable
            organism={organism}
            accessToken={accessToken}
            sequenceEntries={statusArray.APPROVED_FOR_RELEASE}
            bulkActionNames={['revoke']}
            singleActionNames={[]}
            clientConfig={clientConfig}
            client:load
        />
    </SequenceStatusBox>

    <SequenceStatusBox
        count={statusArray.AWAITING_APPROVAL_FOR_REVOCATION.length}
        description='staged for revocation'
        localStorageKey='userSequences.revokedExpanded'
        client:only='react'
    >
        <SequenceEntryTable
            organism={organism}
            accessToken={accessToken}
            sequenceEntries={statusArray.AWAITING_APPROVAL_FOR_REVOCATION}
            bulkActionNames={['confirmRevocation', 'delete']}
            singleActionNames={[]}
            clientConfig={clientConfig}
            client:load
        />
    </SequenceStatusBox>
</div>
