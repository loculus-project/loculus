---
import DataTable from './DataTable.tsx';
import { RevokeButton } from './RevokeButton';
import { SequencesContainer } from './SequencesContainer';
import { getDataTableData } from './getDataTableData';
import { type TableDataEntry } from './types';
import { routes } from '../../routes/routes.ts';
import { type DataUseTermsHistoryEntry, type Group } from '../../types/backend';
import { type Schema } from '../../types/config';
import { type ReferenceGenomes } from '../../types/referencesGenomes';
import { type ClientConfig, type RuntimeConfig } from '../../types/runtimeConfig';
import { EditDataUseTermsButton } from '../DataUseTerms/EditDataUseTermsButton';
import MdiEye from '~icons/mdi/eye';

interface Props {
    tableData: TableDataEntry[];
    organism: string;
    accessionVersion: string;
    dataUseTermsHistory: DataUseTermsHistoryEntry[];
    referenceGenomes: ReferenceGenomes;
    schema: Schema;
    runtimeConfig: RuntimeConfig;
    clientConfig: ClientConfig;
    myGroups: Group[];
    accessToken: string | undefined;
}

const {
    tableData,
    organism,
    accessionVersion,
    dataUseTermsHistory,
    schema,
    accessToken,

    clientConfig,
    referenceGenomes,
    runtimeConfig,
    myGroups,
} = Astro.props;

const groupId = tableData.find((entry) => entry.name === 'groupId')!.value as number;
const isMyGroup = myGroups.some((group) => group.groupId === groupId);

dataUseTermsHistory.sort((a, b) => (a.changeDate > b.changeDate ? -1 : 1));
const currentDataUseTerms = dataUseTermsHistory[0].dataUseTerms;

const dataUseTermsIndex = tableData.findIndex((entry) => entry.name === 'dataUseTerms');
if (dataUseTermsIndex !== -1) {
    tableData[dataUseTermsIndex].value = currentDataUseTerms.type;
}

const isRestricted = currentDataUseTerms.type === 'RESTRICTED';

const genes = referenceGenomes.genes.map((g) => g.name);
const nucleotideSegmentNames = referenceGenomes.nucleotideSequences.map((s) => s.name) as [string, ...string[]];

const loadSequencesAutomatically = schema.loadSequencesAutomatically === true;
const dataTableData = getDataTableData(tableData);
---

{
    isRestricted && (
        <div class='bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4' role='alert'>
            This sequence is only available under the Restricted Use Terms. If you make use of this data, you must
            follow the{' '}
            <a href={routes.datauseTermsPage()} class='underline'>
                terms of use.
            </a>
        </div>
    )
}
<DataTable dataTableData={dataTableData} dataUseTermsHistory={dataUseTermsHistory} />
<div class='mt-10'>
    <SequencesContainer
        client:load
        organism={organism}
        accessionVersion={accessionVersion}
        clientConfig={runtimeConfig.public}
        genes={genes}
        nucleotideSegmentNames={nucleotideSegmentNames}
        loadSequencesAutomatically={loadSequencesAutomatically}
    />
</div>

{
    isMyGroup === true && accessToken !== undefined && (
        <div class='mt-5'>
            <hr />
            <h2 class='text-xl font-bold mt-10 mb-3'>Sequence Management</h2>
            <div class='text-sm text-gray-400 mb-4 block'>
                <MdiEye className='w-6 h-6 inline-block mr-2' />
                Only visible to group members
            </div>

            {isRestricted && (
                <EditDataUseTermsButton
                    clientConfig={clientConfig}
                    accessToken={accessToken}
                    accessionVersion={[accessionVersion.split('.')[0]]}
                    dataUseTerms={currentDataUseTerms}
                    client:load
                />
            )}

            <RevokeButton
                organism={organism}
                clientConfig={clientConfig}
                accessionVersion={accessionVersion.split('.')[0]}
                accessToken={accessToken}
                groupId={groupId}
                client:load
            />
        </div>
    )
}
