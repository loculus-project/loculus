---
import { DataUseTermsHistoryModal } from './DataUseTermsHistoryModal';
import { SubstitutionsContainer } from './MutationBadge';
import { toHeaderMap, type TableDataEntry } from './getTableData';
import { type DataUseTermsHistoryEntry } from '../../types/backend';

interface Props {
    tableData: TableDataEntry[];
    dataUseTermsHistory: DataUseTermsHistoryEntry[];
}

const { tableData, dataUseTermsHistory } = Astro.props;
const headerMap = toHeaderMap(tableData);
---

<div class='mt-2'>
    <div>
        {
            Object.entries(headerMap).map(([header, names]) => (
                <div class='pb-8'>
                    {header !== '' && <h1 class='py-2 font-medium text-primary-600'>{header}</h1>}
                    <table class='table-auto'>
                        <tbody class='bg-white'>
                            {names.map(({ label, value, customDisplay }) => (
                                <tr>
                                    <td class='py-1 w-44 text-sm font-medium text-gray-900 text-right'>{label}</td>
                                    <td class='px-4 py-1 text-sm text-gray-600'>
                                        <div class='items-center gap-3 whitespace-wrap'>
                                            {customDisplay === undefined && value}
                                            {customDisplay !== undefined &&
                                                customDisplay.type === 'badge' &&
                                                (customDisplay.value === undefined ? (
                                                    ''
                                                ) : (
                                                    <SubstitutionsContainer values={customDisplay.value} />
                                                ))}
                                            {customDisplay !== undefined &&
                                                customDisplay.type === 'link' &&
                                                customDisplay.url !== undefined && (
                                                    <a
                                                        href={customDisplay.url.replaceAll(
                                                            '{{value}}',
                                                            value.toString(),
                                                        )}
                                                        target='_blank'
                                                        class='underline'
                                                    >
                                                        {value}
                                                    </a>
                                                )}
                                            {customDisplay !== undefined && customDisplay.type === 'dataUseTerms' && (
                                                <>
                                                    {value}{' '}
                                                    <DataUseTermsHistoryModal
                                                        dataUseTermsHistory={dataUseTermsHistory}
                                                        client:only='react'
                                                    />
                                                </>
                                            )}
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            ))
        }
    </div>
</div>
