---
import '@pagefind/default-ui/css/ui.css';
import MaterialSymbolsSearch from '~icons/material-symbols/search';

const search = {
    label: 'Search',
    cancelLabel: '',
    devWarning: 'Search is disabled in development mode.',
    ctrlKey: 'Ctrl',
};

const project = {
    trailingSlash: 'never',
};
---

<site-search data-strip-trailing-slash={project.trailingSlash === 'never'}>
    <button data-open-modal disabled aria-label={search.label} aria-keyshortcuts='Control+K'>
        <MaterialSymbolsSearch name='magnifier' />
        <span class='sl-hidden md:sl-block' aria-hidden='true'>{search.label}</span>
        <kbd class='sl-hidden md:sl-flex' style='display: none;'>
            <kbd>{search.ctrlKey}</kbd><kbd>K</kbd>
        </kbd>
    </button>

    <dialog style='padding:0' aria-label={search.label}>
        <div class='dialog-frame sl-flex'>
            {
                /* TODO: Make the layout of this button flexible to accommodate different word lengths. Currently hard-coded for English: “Cancel” */
            }
            <button data-close-modal class='sl-flex md:sl-hidden'>
                {search.cancelLabel}
            </button>
            {
                (
                    // import.meta.env.DEV ? (
                    //     <div style='margin: auto; text-align: center; white-space: pre-line;' dir='ltr'>
                    //         <p>{search.devWarning}</p>
                    //     </div>
                    // ) :
                    <div class='search-container'>
                        <div id='starlight__search' />
                    </div>
                )
            }
        </div>
    </dialog>
</site-search>

{
    /**
     * This is intentionally inlined to avoid briefly showing an invalid shortcut.
     * Purposely using the deprecated `navigator.platform` property to detect Apple devices, as the
     * user agent is spoofed by some browsers when opening the devtools.
     */
}
<script is:inline>
    (() => {
        const openBtn = document.querySelector('button[data-open-modal]');
        const shortcut = openBtn?.querySelector('kbd');
        if (!openBtn || !(shortcut instanceof HTMLElement)) return;
        const platformKey = shortcut.querySelector('kbd');
        if (platformKey && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)) {
            platformKey.textContent = '⌘';
            openBtn.setAttribute('aria-keyshortcuts', 'Meta+K');
        }
        shortcut.style.display = '';
    })();
</script>

<script>
    class SiteSearch extends HTMLElement {
        constructor() {
            super();
            const openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!;
            const closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!;
            const dialog = this.querySelector('dialog')!;
            const dialogFrame = this.querySelector('.dialog-frame')!;

            /** Close the modal if a user clicks on a link or outside of the modal. */
            const onClick = (event: MouseEvent) => {
                const isLink = 'href' in (event.target || {});
                if (
                    isLink ||
                    (document.body.contains(event.target as Node) && !dialogFrame.contains(event.target as Node))
                ) {
                    closeModal();
                }
            };

            const openModal = (event?: MouseEvent) => {
                dialog.showModal();
                document.body.toggleAttribute('data-search-modal-open', true);
                this.querySelector('input')?.focus();
                event?.stopPropagation();
                window.addEventListener('click', onClick);
            };

            const closeModal = () => dialog.close();

            openBtn.addEventListener('click', openModal);
            openBtn.disabled = false;
            closeBtn.addEventListener('click', closeModal);

            dialog.addEventListener('close', () => {
                document.body.toggleAttribute('data-search-modal-open', false);
                window.removeEventListener('click', onClick);
            });

            // Listen for `ctrl + k` and `cmd + k` keyboard shortcuts.
            window.addEventListener('keydown', (e) => {
                if ((e.metaKey === true || e.ctrlKey === true) && e.key === 'k') {
                    dialog.open ? closeModal() : openModal();
                    e.preventDefault();
                }
            });

            let translations = {};
            try {
                translations = JSON.parse(this.dataset.translations || '{}');
            } catch {}

            const shouldStrip = this.dataset.stripTrailingSlash !== undefined;
            const stripTrailingSlash = (path: string) => path.replace(/(.)\/(#.*)?$/, '$1$2');
            const formatURL = shouldStrip ? stripTrailingSlash : (path: string) => path;

            window.addEventListener('DOMContentLoaded', () => {
                // if (import.meta.env.DEV) return;
                const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
                onIdle(async () => {
                    // @ts-ignore
                    const { PagefindUI } = await import('@pagefind/default-ui');
                    new PagefindUI({
                        element: '#starlight__search',
                        showImages: false,
                        showSubResults: true,
                        processResult: (result: { url: string; sub_results: Array<{ url: string }> }) => {
                            result.url = formatURL(result.url);
                            result.sub_results = result.sub_results.map((sub_result) => {
                                sub_result.url = formatURL(sub_result.url);
                                return sub_result;
                            });
                        },
                    });
                });
            });
        }
    }
    customElements.define('site-search', SiteSearch);
</script>
