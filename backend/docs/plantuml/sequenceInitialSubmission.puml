@startuml
    participant "Pathoplexus Frontend / User" as frontend #LightCyan
    participant "(Pre-)Processing Pipeline" as processing #LightGreen
    participant "Pathoplexus Backend" as backend #Orange
    database "Database" as DB

    frontend -> backend: submit initial sequence data
    alt Sequence and Metadata Files are valid
        backend -> frontend: response with sequenceIds
        backend -> DB: Store initial sequence data
        backend -> DB: set status to 'RECEIVED'
    else Sequence and Metadata Files are invalid
        backend -> frontend: response with error
    end

   note right of frontend
      In the following we assume initial raw sequence data are valid
   end note

    loop until no processing errors

        processing -> backend: Query initial/reviewed sequence data
        backend -> DB: Query initial/reviewed sequence data
        backend -> DB: Set status from 'RECEIVED'/'HAS_ERRORS' to 'IN_PROCESSING'
        DB --> backend: initial/reviewed sequence data
        backend --> processing: initial/reviewed sequence data

        processing -> backend: submit processed sequence data
        alt validation errors occur
            backend -> processing: response with validation errors
             note right of frontend
                  Validation error are probably only redeemable by changing the pre-processing pipeline
                  In the following we assume that no validation error occurred
               end note
        end loop

        alt processed sequence data contain processing errors
            backend -> DB: Store processed sequence data with errors
            backend -> DB: set status to 'HAS_ERRORS'
        else
            backend -> DB: Store processed sequence data without errors
            backend -> DB: set status to 'AWAITING_APPROVAL'
        end
         frontend -> backend: query processed sequence data with errors
        frontend -> frontend: address errors and adapt sequence data

        frontend -> backend: submit adapted sequence data
        backend -> DB: store adapted sequence data
        backend -> DB: set status to 'RECEIVED'
    end loop


    frontend -> backend: Query processed sequence data
    backend -> DB: Query processed sequence data
    DB -> backend: processed sequence data
    backend -> frontend: processed sequence data

    frontend -> backend: approve processed sequence data
    backend -> DB: set status from 'AWAITING_APPROVAL' to 'APPROVED_FOR_RELEASE'

@enduml

