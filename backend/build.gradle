import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    // If kotlin version bumped, check if gradle version can be bumped as well 
    // Check here: https://kotlinlang.org/docs/gradle-configure-project.html#apply-the-plugin
    // To bump gradle version run: `./gradlew wrapper --gradle-version=VERSION && ./gradlew wrapper`
    // Then commit the changes
    id 'org.jetbrains.kotlin.jvm' version '2.2.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.2.10'
    id 'org.jlleitschuh.gradle.ktlint' version '13.1.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

group = 'org.loculus'
version = '0.0.1'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

kotlin {
    jvmToolchain(21)
    // Added to dismiss warnings, see: https://github.com/loculus-project/loculus/issues/4529
    compilerOptions.freeCompilerArgs.add("-Xannotation-default-target=param-property")
    compilerOptions.freeCompilerArgs.add("-opt-in=kotlin.time.ExperimentalTime")
}

dependencyLocking {
    lockAllConfigurations()
    lockMode = LockMode.STRICT
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "io.github.microutils:kotlin-logging-jvm:3.0.5"
    implementation "org.postgresql:postgresql:42.7.8"
    implementation "org.apache.commons:commons-csv:1.14.1"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13"
    implementation "org.flywaydb:flyway-database-postgresql" // Version managed by Spring Boot to ensure compatibility
    implementation "org.jetbrains.exposed:exposed-spring-boot-starter:0.61.0"
    implementation "org.jetbrains.exposed:exposed-jdbc:0.61.0"
    implementation "org.jetbrains.exposed:exposed-json:0.61.0"
    implementation "org.jetbrains.exposed:exposed-kotlin-datetime:0.61.0"
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.7.1-0.6.x-compat"
    implementation "org.hibernate.validator:hibernate-validator:9.0.1.Final"
    implementation "org.keycloak:keycloak-admin-client:26.0.6"
    implementation("io.minio:minio:8.5.17")
    implementation("software.amazon.awssdk:s3:2.33.4")

    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation 'org.apache.commons:commons-compress:1.28.0'
    implementation 'com.github.luben:zstd-jni:1.5.7-4'
    implementation 'org.tukaani:xz:1.10'

    implementation("org.redundent:kotlin-xml-builder:1.9.3")
    implementation("org.jsoup:jsoup:1.21.2")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.mockito"
    }
    testImplementation "io.jsonwebtoken:jjwt-api:0.13.0"
    testImplementation "io.jsonwebtoken:jjwt-impl:0.13.0"
    testImplementation "io.jsonwebtoken:jjwt-jackson:0.13.0"
    testImplementation "com.ninja-squad:springmockk:4.0.2"
    testImplementation "org.testcontainers:postgresql:1.21.3"
    testImplementation "org.testcontainers:minio:1.21.3"
    testImplementation platform("org.junit:junit-bom:5.13.4")
    testImplementation "org.junit.platform:junit-platform-launcher"
    ktlint("com.pinterest.ktlint:ktlint-cli:1.7.1") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

// Check if the docker engine is running and reachable
task checkDocker {
    doLast {
        def process = "docker info".execute()
        def output = new StringWriter()
        def error = new StringWriter()
        process.consumeProcessOutput(output, error)
        process.waitFor()

        if (process.exitValue() != 0) {
            throw new GradleException("Docker is not running: ${error.toString()}")
        }
        println "Docker is running."
    }
}

tasks.named('test') {
    // Docker is required to start the testing database with https://java.testcontainers.org/
    if (!System.getenv('USE_NONDOCKER_INFRA')?.toBoolean()) {
        dependsOn checkDocker
    }
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.FAILED
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
    }
}

tasks.named('bootBuildImage') {
    environment["BP_JVM_VERSION"] = "21"
    // https://paketo.io/docs/howto/configuration/
    environment["BPE_SPRING_PROFILES_ACTIVE"] = "docker"
}

tasks.named("jar") {
    enabled = false // prevent to generate plain jar
}
tasks.named("bootJar") {
    enabled = true
    archiveVersion.set("")
}

task downloadDependencies {
    doLast {
        configurations.all { configuration ->
            if (configuration.canBeResolved) {
                println "Downloading dependencies for: ${configuration.name}"
                try {
                    configuration.resolve()
                } catch (Exception e) {
                    println "Failed to download dependencies for: ${configuration.name}"
                    println e.message
                }
            }
        }
    }
}
