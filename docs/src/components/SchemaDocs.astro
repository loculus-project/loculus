---
import { readFile } from 'node:fs/promises';
import { type JSONSchema7, type JSONSchema7Definition } from 'json-schema';

const { schemaPath, group } = Astro.props;
let schema: JSONSchema7 = {};

try {
    const data = await readFile(schemaPath, 'utf-8');
    schema = JSON.parse(data);
} catch (error) {
    console.error('Error reading schema:', error);
}

const rows: Row[] = [];

interface Row {
    key: string,
    type?: string,
    default?: string,
    description?: string
}

function addSelfAndChildren(prefix: string, key: string, definition: JSONSchema7Definition) {
    if (
        typeof definition === 'object' &&
        definition !== null &&
        (('group' in definition &&
        definition.group === group) || prefix !== "")
    ) {
        rows.push({
            key: `${prefix}${key}`,
            type: String(definition.type),
            default: definition.default ? String(definition.default) : "",
            description: definition.description
        })
        if ('properties' in definition && definition.properties) {
            Object.entries(definition.properties).forEach(([k, d]) => addSelfAndChildren(`${prefix}${key}.`, k, d));
        }
    }
}

if (schema.properties) {
    Object.entries(schema.properties).forEach(([key, definition]) => {
        addSelfAndChildren("", key, definition);
    });
}
---

<div>
    <h2>{group} Schema Properties</h2>
    <div class='overflow-x-scroll'>
        <table class='min-w-[700px]'>
            <thead>
                <tr>
                    <th class='w-56'>Field</th>
                    <th>Type</th>
                    <th class='w-32'>Default</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                {
                    rows.map(row => (
                        <tr>
                            <td><code>{row.key}</code></td>
                            <td>{row.type}</td>
                            <td>{row.default}</td>
                            <td>{row.description}</td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
    <ul>
    </ul>
</div>
