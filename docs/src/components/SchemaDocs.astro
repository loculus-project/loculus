---
import { readFile } from 'node:fs/promises';
import { type JSONSchema7, type JSONSchema7Definition, type JSONSchema7TypeName } from 'json-schema';
import { defineAction } from 'astro:actions';
import { defineCollection } from 'astro:content';

const { schemaPath, group, fieldColumnClass } = Astro.props;
let schema: JSONSchema7 = {};

try {
    const data = await readFile(schemaPath, 'utf-8');
    schema = JSON.parse(data);
} catch (error) {
    console.error('Error reading schema:', error);
}

const rows: Row[] = [];

interface Row {
    key: string,
    type?: string,
    default?: string,
    description?: string
}

function capitalizeFirst(str: string) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

function typeToString(type: JSONSchema7TypeName | JSONSchema7TypeName[] | undefined) {
    if (type === undefined) return "";
    if (Array.isArray(type)) {
        return type.map(t => capitalizeFirst(String(t))).join(", ")
    }
    return capitalizeFirst(String(type));
}

function addSelfAndChildren(prefix: string, key: string, definition: JSONSchema7Definition) {
    if (
        typeof definition === 'object' &&
        definition !== null
    ) {
        if ('placeholder' in definition) {
            key = `<${definition.placeholder}>`;
        }
        if ('docsIncludePrefix' in definition && definition.docsIncludePrefix === false) {
            prefix = "";
        }
        if (
            'groups' in definition &&
            Array.isArray(definition.groups) &&
            definition.groups.includes(group)
        ) {
            var def = definition.default !== undefined ? String(definition.default) : "";
            if (definition.type === "string" && def !== "") {
                def = `"${def}"`
            }
            rows.push({
                key: `${prefix}${key}`,
                type: typeToString(definition.type),
                default: def,
                description: definition.description
            })
        }
        if ('properties' in definition && definition.properties) {
            Object.entries(definition.properties).forEach(([k, d]) => addSelfAndChildren(`${prefix}${key}.`, k, d));
        }
        if ('patternProperties' in definition && definition.patternProperties) {
            Object.entries(definition.patternProperties).forEach(([k, d]) => addSelfAndChildren(`${prefix}${key}.`, k, d));
        }
    }
}

if (schema.properties) {
    Object.entries(schema.properties).forEach(([key, definition]) => {
        addSelfAndChildren("", key, definition);
    });
}

// TODO 'desciription' should be markdown processed so `` works as intended

// TODO - can we get links to other sections in the descriptions? Would be cool to link to other types.

// TODO improve array handling (i.e. referenceGenomes.nucleotideSequences)

---

<div class='overflow-x-scroll'>
    <table class='min-w-[700px]'>
        <thead>
            <tr>
                <th class={fieldColumnClass}>Field</th>
                <th>Type</th>
                <th>Default</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            {
                rows.map(row => (
                    <tr>
                        <td><code>{row.key}</code></td>
                        <td>{row.type}</td>
                        <td>{row.default}</td>
                        <td>{row.description}</td>
                    </tr>
                ))
            }
        </tbody>
    </table>
</div>
