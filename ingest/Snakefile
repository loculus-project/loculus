import yaml
import os
from pathlib import Path

with open("config/defaults.yaml") as f:
    defaults = yaml.safe_load(f)

# Merge configs, using defaults only as fallback
# Write to results/config.yaml
for key, value in defaults.items():
    if not key in config:
        config[key] = value

config["slack_hook"] = os.getenv("SLACK_HOOK")
# Infer whether nucleotide sequences are segmented
config["segmented"] = len(config["nucleotide_sequences"]) > 1

Path("results").mkdir(parents=True, exist_ok=True)
with open("results/config.yaml", "w") as f:
    f.write(yaml.dump(config))

TAXON_ID = config["taxon_id"]
SEGMENTED = config["segmented"]
LOG_LEVEL = config.get("log_level", "INFO")
NCBI_API_KEY = os.getenv("NCBI_API_KEY")
NCBI_GATEWAY_URL = config.get("ncbi_gateway_url")
MIRROR_BUCKET = config.get("mirror_bucket", "")
FILTER_FASTA_HEADERS = config.get("filter_fasta_headers", None)
APPROVE_TIMEOUT_MIN = config.get("approve_timeout_min")  # time in minutes
CHECK_ENA_DEPOSITION = config.get("check_ena_deposition", False)
ALIGN = True
GROUPS_OVERRIDE_JSON = None

dataset_server_map = {}
dataset_name_map = {}

if SEGMENTED:
    GROUPS_OVERRIDE_JSON = config.get(
        "grouping_override", None
    )  # JSON map from group to segments' insdcAccessionFull
    if config.get("minimizer_index") and config.get("minimizer_parser"):
        ALIGN = False
    if ALIGN:
        for segment in config["nucleotide_sequences"]:
            if (
                config.get("nextclade_dataset_server_map")
                and segment in config["nextclade_dataset_server_map"]
            ):
                dataset_server_map[segment] = config["nextclade_dataset_server_map"][
                    segment
                ]
            else:
                dataset_server_map[segment] = config.get("nextclade_dataset_server")
            if (
                config.get("nextclade_dataset_name_map")
                and segment in config["nextclade_dataset_name_map"]
            ):
                dataset_name_map[segment] = config["nextclade_dataset_name_map"][
                    segment
                ]
            else:
                dataset_name_map[segment] = (
                    config.get("nextclade_dataset_name") + "/" + segment
                )

if os.uname().sysname == "Darwin":
    # Don't use conda-forge unzip on macOS
    # Due to https://github.com/conda-forge/unzip-feedstock/issues/16
    unzip = "/usr/bin/unzip"
else:
    unzip = "unzip"


rule all:
    params:
        config=lambda wildcards: str(config),
    input:
        "results/submitted",
        "results/revised",
        "results/approved",


rule clean:
    # Useful for testing, when debugging
    shell:
        "rm -rf results/*"


rule fetch_ncbi_dataset_package:
    output:
        dataset_package="results/ncbi_dataset.zip",
    params:
        taxon_id=TAXON_ID,
        api_key=NCBI_API_KEY,
        gateway=f"--gateway-url {NCBI_GATEWAY_URL}" if NCBI_GATEWAY_URL else "",
        use_mirror=bool(MIRROR_BUCKET),
        mirror_url=f"{MIRROR_BUCKET.strip('/')}/{TAXON_ID}.zip",
    shell:
        """
        if [[ "{params.use_mirror}" == "True" ]]; then
            curl {params.mirror_url} -o {output.dataset_package}
        else
            datasets download virus genome taxon {params.taxon_id} \
            --no-progressbar \
            --filename {output.dataset_package} \
            --api-key {params.api_key} \
            {params.gateway}
        fi
        """


rule format_ncbi_dataset_report:
    input:
        script="scripts/format_ncbi_metadata.py",
        dataset_package="results/ncbi_dataset.zip",
        config="results/config.yaml",
    output:
        ncbi_dataset_tsv="results/metadata_post_rename.tsv",
    params:
        unzip=unzip,
    shell:
        """
        {params.unzip} -o {input.dataset_package} -d results
        python {input.script} \
            --config-file {input.config} \
            --input results/ncbi_dataset/data/data_report.jsonl \
            --output {output.ncbi_dataset_tsv}
        """


if CHECK_ENA_DEPOSITION:

    rule get_loculus_depositions:
        input:
            script="scripts/get_loculus_depositions.py",
            config="results/config.yaml",
        output:
            exclude_insdc_accessions="results/insdc_accessions_to_exclude.tsv",
            exclude_biosample_accessions="results/biosample_accessions_to_exclude.tsv",
        params:
            log_level=LOG_LEVEL,
        shell:
            """
            python {input.script} \
            --output-insdc-accessions {output.exclude_insdc_accessions} \
            --output-biosample-accessions {output.exclude_biosample_accessions} \
            --log-level {params.log_level} \
            --config-file {input.config} \
            """

    rule filter_out_loculus_depositions:
        input:
            ncbi_dataset_tsv="results/metadata_post_rename.tsv",
            exclude_biosample_accessions="results/biosample_accessions_to_exclude.tsv",
            exclude_insdc_accessions="results/insdc_accessions_to_exclude.tsv",
            script="scripts/filter_out_depositions.py",
            config="results/config.yaml",
        output:
            metadata_tsv="results/filtered_metadata.tsv",
        params:
            log_level=LOG_LEVEL,
        shell:
            """
            python {input.script} \
            --input-metadata-tsv {input.ncbi_dataset_tsv} \
            --exclude-insdc-accessions {input.exclude_insdc_accessions} \
            --exclude-biosample-accessions {input.exclude_biosample_accessions} \
            --log-level {params.log_level} \
            --config-file {input.config} \
            --output-metadata-tsv {output.metadata_tsv} \
            """


rule extract_ncbi_dataset_sequences:
    """
    For unsegmented sequences, we only keep the sequence ID in the header.
    For sequences where we filter, we keep full header.
    """
    input:
        dataset_package="results/ncbi_dataset.zip",
    output:
        ncbi_dataset_sequences="results/sequences.fasta",
    params:
        header_arg="" if FILTER_FASTA_HEADERS else "-i",  # Keep full header if segmented
        unzip=unzip,
    shell:
        """
        {params.unzip} -jp {input.dataset_package} \
        ncbi_dataset/data/genomic.fna \
        | seqkit seq -w0 {params.header_arg} \
        > {output.ncbi_dataset_sequences}
        """


rule calculate_sequence_hashes:
    """Output JSON: {insdc_accession: md5_sequence_hash, ...}"""
    input:
        script="scripts/calculate_sequence_hashes.py",
        sequences="results/sequences.fasta",
    output:
        sequence_hashes="results/sequence_hashes.ndjson",
        sequence_json="results/sequences.ndjson",
    shell:
        """
        python {input.script} \
            --input {input.sequences} \
            --output-hashes {output.sequence_hashes} \
            --output-sequences {output.sequence_json}
        """


if FILTER_FASTA_HEADERS:

    rule filter_fasta_headers:
        input:
            sequences="results/sequences.fasta",
            script="scripts/filter_sequences.py",
            config="results/config.yaml",
        output:
            results="results/sequences_filtered.fasta",
        params:
            filter_fasta_headers=FILTER_FASTA_HEADERS,
            log_level=LOG_LEVEL,
        shell:
            """
            python {input.script} \
            --input-seq {input.sequences} \
            --output-seq {output.results} \
            --log-level {params.log_level} \
            --config-file {input.config} \
            """


if ALIGN:

    rule align:
        input:
            sequences=(
                "results/sequences_filtered.fasta"
                if FILTER_FASTA_HEADERS
                else "results/sequences.fasta"
            ),
        output:
            results="results/nextclade_{segment}.tsv",
        params:
            dataset_server=lambda w: dataset_server_map[w.segment],
            dataset_name=lambda w: dataset_name_map[w.segment],
        shell:
            """
            nextclade run \
                {input.sequences} \
                --output-tsv {output.results} \
                --server {params.dataset_server} \
                --dataset-name {params.dataset_name} \
            """

    rule process_alignments:
        input:
            results=expand(
                "results/nextclade_{segment}.tsv",
                segment=config["nucleotide_sequences"],
            ),
        output:
            merged="results/nextclade_merged.tsv",
        params:
            # -f segment_name1=segment_path1 - segment_name2=segment_path2
            # to do source tracking with tsv-append
            # https://github.com/eBay/tsv-utils/blob/master/docs/tool_reference/tsv-append.md
            segment_paths=" ".join(
                [
                    f"-f {segment}=results/nextclade_{segment}.tsv"
                    for segment in config["nucleotide_sequences"]
                ]
            ),
        shell:
            """
            tsv-append --header --source-header segment \
                {params.segment_paths} \
            | tsv-filter --header --not-empty alignmentScore \
            | tsv-select --header --fields seqName,segment \
            > {output.merged}
            """


if not ALIGN:

    rule download_minimizer:
        output:
            results="results/minimizer.json",
        params:
            minimizer=config.get("minimizer_index"),
        shell:
            """
            curl -L -o {output.results} {params.minimizer}
            """

    rule nextclade_sort:
        input:
            sequences="results/sequences.fasta",
            minimizer="results/minimizer.json",
        output:
            results="results/sort_results.tsv",
        shell:
            """
            nextclade sort -m {input.minimizer} \
            -r {output.results}  {input.sequences} \
            --max-score-gap 0.3 --min-score 0.05 --min-hits 2  --all-matches
            """

    rule parse_sort:
        input:
            sorted="results/sort_results.tsv",
            config="results/config.yaml",
            script="scripts/parse_nextclade_sort_output.py",
        output:
            merged="results/nextclade_merged.tsv",
        params:
            log_level=LOG_LEVEL,
        shell:
            """
            python {input.script} \
            --config-file {input.config} \
            --sort-results {input.sorted} \
            --output {output.merged} \
            --log-level {params.log_level} \
            """


rule prepare_metadata:
    # Transform Genbank metadata keys and values to Loculus format
    input:
        script="scripts/prepare_metadata.py",
        metadata=(
            "results/filtered_metadata.tsv"
            if CHECK_ENA_DEPOSITION
            else "results/metadata_post_rename.tsv"
        ),
        segments="results/nextclade_merged.tsv" if SEGMENTED else "results/config.yaml",  # else is just a dummy
        sequence_hashes="results/sequence_hashes.ndjson",
        config="results/config.yaml",
    output:
        metadata="results/metadata_post_prepare.ndjson",
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --input {input.metadata} \
            --sequence-hashes {input.sequence_hashes} \
            --segments {input.segments} \
            --output {output.metadata} \
            --log-level {params.log_level} \
        """


if GROUPS_OVERRIDE_JSON:

    rule download_groups:
        output:
            results="results/groups.json",
        params:
            grouping=config.get("grouping_override"),
        shell:
            """
            curl -L -o {output.results} {params.grouping}
            """

    rule override_group_segments:
        """Group segments based on JSON map"""
        input:
            script="scripts/override_group_segments.py",
            metadata="results/metadata_post_prepare.ndjson",
            sequences="results/sequences.ndjson",
            config="results/config.yaml",
            groups="results/groups.json",
        output:
            metadata="results/metadata_grouped.ndjson",
            sequences="results/sequences_grouped.ndjson",
            ungrouped_metadata="results/metadata_ungrouped.ndjson",
            ungrouped_sequences="results/sequences_ungrouped.ndjson",
        params:
            log_level=LOG_LEVEL,
        shell:
            """
            python {input.script} \
                --config-file {input.config} \
                --groups {input.groups} \
                --input-metadata {input.metadata} \
                --input-seq {input.sequences} \
                --output-metadata {output.metadata} \
                --output-ungrouped-metadata {output.ungrouped_metadata} \
                --output-ungrouped-seq {output.ungrouped_sequences} \
                --output-seq {output.sequences} \
                --log-level {params.log_level} \
            """


rule heuristic_group_segments:
    """Group segments based on heuristic, join with previous groups if available"""
    input:
        script="scripts/heuristic_group_segments.py",
        metadata=(
            "results/metadata_ungrouped.ndjson"
            if GROUPS_OVERRIDE_JSON
            else "results/metadata_post_prepare.ndjson"
        ),
        sequences=(
            "results/sequences_ungrouped.ndjson"
            if GROUPS_OVERRIDE_JSON
            else "results/sequences.ndjson"
        ),
        metadata_grouped=(
            "results/metadata_grouped.ndjson"
            if GROUPS_OVERRIDE_JSON
            else "results/metadata_post_prepare.ndjson"
        ),
        sequences_grouped=(
            "results/sequences_grouped.ndjson"
            if GROUPS_OVERRIDE_JSON
            else "results/sequences.ndjson"
        ),
        config="results/config.yaml",
    output:
        metadata="results/metadata_post_group.ndjson",
        sequences="results/sequences_post_group.ndjson",
    params:
        log_level=LOG_LEVEL,
        GROUPS_OVERRIDE_JSON="true" if GROUPS_OVERRIDE_JSON else "false",
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --input-metadata {input.metadata} \
            --input-seq {input.sequences} \
            --output-metadata {output.metadata} \
            --output-seq {output.sequences} \
            --log-level {params.log_level}
        if [ "{params.GROUPS_OVERRIDE_JSON}" = "true" ]; then
            cat {input.metadata_grouped} >> {output.metadata}
            cat {input.sequences_grouped} >> {output.sequences}
        fi
        """


rule get_previous_submissions:
    """Download metadata and sequence hashes of all previously submitted sequences
    Produces mapping from INSDC accession to loculus id/version/hash
    insdc_accession:
        loculus_accession: abcd
        jointAccession: xx.seg1/xy.seg2
        versions:
        -   version: 1
            hash: abcd
            status: APPROVED_FOR_RELEASE
        -   version: 2
            hash: efg
            status: HAS_ERRORS
        ...
    """
    input:
        # Reduce likelihood of race condition of multi-submission
        # By delaying the start of the script
        script="scripts/call_loculus.py",
        prepped_metadata=(
            "results/metadata_post_group.ndjson"
            if SEGMENTED
            else "results/metadata_post_prepare.ndjson"
        ),
        config="results/config.yaml",
    output:
        hashes="results/previous_submissions.json",
    params:
        log_level=LOG_LEVEL,
        sleep=config["post_start_sleep"],
    shell:
        """
        sleep {params.sleep}
        python {input.script} \
            --mode get-submitted \
            --config-file {input.config} \
            --log-level {params.log_level} \
            --output {output.hashes}
        """


rule compare_hashes:
    input:
        script="scripts/compare_hashes.py",
        config="results/config.yaml",
        old_hashes="results/previous_submissions.json",
        metadata=(
            "results/metadata_post_group.ndjson"
            if SEGMENTED
            else "results/metadata_post_prepare.ndjson"
        ),
    output:
        to_submit="results/to_submit.json",
        to_revise="results/to_revise.json",
        to_revoke="results/to_revoke.json",
        unchanged="results/unchanged.json",
        blocked="results/blocked.json",
        sampled_out="results/sampled_out.json",
    params:
        log_level=LOG_LEVEL,
        subsample_fraction=config.get("subsample_fraction", 1.0),
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --old-hashes {input.old_hashes} \
            --metadata {input.metadata} \
            --to-submit {output.to_submit} \
            --to-revise {output.to_revise} \
            --to-revoke {output.to_revoke} \
            --unchanged {output.unchanged} \
            --output-blocked {output.blocked} \
            --sampled-out-file {output.sampled_out} \
            --log-level {params.log_level} \
            --subsample-fraction {params.subsample_fraction} \
        """


rule prepare_files:
    input:
        script="scripts/prepare_files.py",
        config="results/config.yaml",
        metadata=(
            "results/metadata_post_group.ndjson"
            if SEGMENTED
            else "results/metadata_post_prepare.ndjson"
        ),
        sequences=(
            "results/sequences_post_group.ndjson"
            if SEGMENTED
            else "results/sequences.ndjson"
        ),
        to_submit="results/to_submit.json",
        to_revise="results/to_revise.json",
        to_revoke="results/to_revoke.json",
    output:
        sequences_submit="results/submit_sequences.fasta",
        sequences_revise="results/revise_sequences.fasta",
        sequences_revoke="results/sequences_to_submit_prior_to_revoke.fasta",
        metadata_submit="results/submit_metadata.tsv",
        metadata_revise="results/revise_metadata.tsv",
        metadata_revoke="results/metadata_to_submit_prior_to_revoke.tsv",
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --metadata-path {input.metadata} \
            --sequences-path {input.sequences} \
            --to-submit-path {input.to_submit} \
            --to-revise-path {input.to_revise} \
            --to-revoke-path {input.to_revoke} \
            --metadata-submit-path {output.metadata_submit} \
            --metadata-revise-path {output.metadata_revise} \
            --metadata-submit-prior-to-revoke-path {output.metadata_revoke} \
            --sequences-submit-path {output.sequences_submit} \
            --sequences-revise-path {output.sequences_revise} \
            --sequences-submit-prior-to-revoke-path {output.sequences_revoke} \
        """


rule sort_fasta:
    """Sort FASTA sequences by submissionId using two-pass to avoid memory issues"""
    input:
        sequences="results/{basename}.fasta",
    output:
        sorted="results/{basename}_sorted.fasta",
    shell:
        """
        seqkit sort -N --two-pass {input.sequences} | seqkit seq -w 0 > {output.sorted}
        """


rule sort_metadata:
    """Sort metadata by submissionId, keep header at top of file. If file is empty or submissionId column is missing, do nothing."""
    input:
        metadata="results/{basename}.tsv",
    output:
        sorted="results/{basename}_sorted.tsv",
    shell:
        """
        columnNumber=$(awk -F'\\t' '{{for(i=1;i<=NF;i++) if($i=="submissionId") print i}}' {input.metadata});
        if [ ${{columnNumber}} ]; then
        (head -n 1 {input.metadata} && tail -n +2 {input.metadata} | sort -t$'\t' -k${{columnNumber}},${{columnNumber}}) > {output.sorted}
        else
        cat {input.metadata} > {output.sorted}
        fi
        """


rule submit:
    input:
        script="scripts/call_loculus.py",
        metadata="results/submit_metadata_sorted.tsv",
        sequences="results/submit_sequences_sorted.fasta",
        config="results/config.yaml",
    output:
        submitted=touch("results/submitted"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        if [ -s {input.metadata} ]; then
            python {input.script} \
                --mode submit \
                --metadata {input.metadata} \
                --sequences {input.sequences} \
                --config-file {input.config} \
                --log-level {params.log_level}
        fi
        """


rule revise:
    input:
        script="scripts/call_loculus.py",
        metadata="results/revise_metadata_sorted.tsv",
        sequences="results/revise_sequences_sorted.fasta",
        config="results/config.yaml",
    output:
        revised=touch("results/revised"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        if [ -s {input.metadata} ]; then
            python {input.script} \
                --mode revise \
                --metadata {input.metadata} \
                --sequences {input.sequences} \
                --config-file {input.config} \
                --log-level {params.log_level}
        fi
        """


rule regroup_and_revoke:
    input:
        script="scripts/call_loculus.py",
        metadata="results/metadata_to_submit_prior_to_revoke_sorted.tsv",
        sequences="results/sequences_to_submit_prior_to_revoke_sorted.fasta",
        map="results/to_revoke.json",
        config="results/config.yaml",
    output:
        revoked=touch("results/revoked"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        if [ -s {input.metadata} ]; then
            python {input.script} \
                --mode regroup-and-revoke \
                --metadata {input.metadata} \
                --sequences {input.sequences} \
                --revoke-map {input.map} \
                --config-file {input.config} \
                --log-level {params.log_level}
        fi
        """


rule approve:
    input:
        script="scripts/call_loculus.py",
        config="results/config.yaml",
    output:
        approved=touch("results/approved"),
    params:
        log_level=LOG_LEVEL,
        approve_timeout_min=APPROVE_TIMEOUT_MIN,
    shell:
        """
        python {input.script} \
            --mode approve \
            --config-file {input.config} \
            --log-level {params.log_level} \
            --approve-timeout {params.approve_timeout_min}
        """
