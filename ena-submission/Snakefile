import yaml
from pathlib import Path

with open("config/config.yaml") as f:
    config = yaml.safe_load(f)

with open("config/defaults.yaml") as f:
    defaults = yaml.safe_load(f)

# Merge configs, using defaults only as fallback
# Write to results/config.yaml
for key, value in defaults.items():
    if not key in config:
        config[key] = value

Path("results").mkdir(parents=True, exist_ok=True)
with open("results/config.yaml", "w") as f:
    f.write(yaml.dump(config))

LOG_LEVEL = config.get("log_level", "INFO")


rule all:
    input:
        triggered="results/triggered",
        project_created="results/project_created",
        sample_created="results/sample_created",
        assembly_created="results/assembly_created",
        uploaded_external_metadata="results/uploaded_external_metadata",


rule get_ena_submission_list:
    input:
        script="scripts/get_ena_submission_list.py",
        config="results/config.yaml",
    output:
        released="results/ena_submission_list.json",
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
                --config-file {input.config} \
                --output-file {output.released} \
                --log-level {params.log_level} \
        """


rule trigger_submission_to_ena:
    input:
        script="scripts/trigger_submission_to_ena.py",
        config="results/config.yaml",
    output:
        submitted=touch("results/triggered"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
                --config-file {input.config} \
                --log-level {params.log_level} \
        """


rule trigger_submission_to_ena_from_file:  # for testing
    input:
        script="scripts/trigger_submission_to_ena.py",
        input_file="results/approved_ena_submission_list.json",
        config="results/config.yaml",
    output:
        submitted=touch("results/triggered_from_file"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
                --config-file {input.config} \
                --input-file {input.input_file} \
                --log-level {params.log_level} \
        """


rule create_project:
    input:
        script="scripts/create_project.py",
        config="results/config.yaml",
    output:
        project_created=touch("results/project_created"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --log-level {params.log_level} \
        """


rule create_sample:
    input:
        script="scripts/create_sample.py",
        config="results/config.yaml",
    output:
        sample_created=touch("results/sample_created"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --log-level {params.log_level} \
        """


rule create_assembly:
    input:
        script="scripts/create_assembly.py",
        config="results/config.yaml",
    output:
        sample_created=touch("results/assembly_created"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --log-level {params.log_level} \
        """


rule upload_to_loculus:
    input:
        script="scripts/upload_external_metadata_to_loculus.py",
        config="results/config.yaml",
    output:
        sample_created=touch("results/uploaded_external_metadata"),
    params:
        log_level=LOG_LEVEL,
    shell:
        """
        python {input.script} \
            --config-file {input.config} \
            --log-level {params.log_level} \
        """
