{{- if and .Values.s3.enabled .Values.runDevelopmentS3 }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-policies
data:
  policy.json: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::{{ .Values.s3.bucket.bucket }}/*",
          "Principal": "*",
          "Condition": {
            "StringEquals": {
              "s3:ExistingObjectTag/public": "true"
            }
          }
        }
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loculus
      component: minio
  template:
    metadata:
      labels:
        app: loculus
        component: minio
    spec:
      volumes:
        - name: policy-volume
          configMap:
            name: minio-policies
      containers:
        - name: minio
          image: minio/minio:latest
          {{- include "loculus.resources" (list "minio" $.Values) | nindent 10 }}
          args: ["server", "/data"]
          ports:
            - containerPort: 9000
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: s3-bucket
                  key: accessKey
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: s3-bucket
                  key: secretKey
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    (
                      sleep 10
                      mc alias set local http://localhost:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"
                      mc mb -p local/{{ .Values.s3.bucket.bucket }}
                      echo "Bucket {{ .Values.s3.bucket.bucket }} ensured."
                      mc anonymous set-json /policy/policy.json local/{{ .Values.s3.bucket.bucket }}
                    ) &
          volumeMounts:
            - name: policy-volume
              mountPath: /policy
      restartPolicy: Always
{{- end }}
