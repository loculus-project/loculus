{{- if .Values.useQuerulus }}
{{- $dockerTag := include "loculus.dockerTag" .Values }}

{{- range $key, $organism := (include "loculus.enabledOrganisms" . | fromJson) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loculus-querulus-{{ $key }}
  annotations:
spec:
  replicas: {{ $.Values.replicas.querulus | default 2 }}
  selector:
    matchLabels:
      app: loculus
      component: querulus-{{ $key }}
  template:
    metadata:
      annotations:
        timestamp: {{ now | quote }}
      labels:
        app: loculus
        component: querulus-{{ $key }}
    spec:
      {{- include "possiblePriorityClassName" $ | nindent 6 }}
      initContainers:
        {{- include "loculus.configProcessor" (dict "name" "querulus-config" "dockerTag" $dockerTag) | nindent 8 }}
      containers:
        - name: querulus
          image: "{{ $.Values.images.querulus.repository }}:{{ $.Values.images.querulus.tag }}"
          imagePullPolicy: "{{ $.Values.images.querulus.pullPolicy }}"
          {{- include "loculus.resources" (list "querulus" $.Values $key) | nindent 10 }}
          ports:
            - containerPort: 8000
          env:
            - name: DB_HOST
              value: {{ $.Values.databaseConfiguration.host | default "loculus-postgres-service" }}
            - name: DB_PORT
              value: {{ $.Values.databaseConfiguration.port | default "5432" | quote }}
            - name: DB_NAME
              value: {{ $.Values.databaseConfiguration.database | default "loculus" }}
            - name: DB_USER
              value: {{ $.Values.databaseConfiguration.username | default "postgres" }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.databaseConfiguration.secretName | default "loculus-postgres-secret" }}
                  key: password
          volumeMounts:
            - name: querulus-config-processed
              mountPath: /app/config/querulus_config.json
              subPath: querulus_config.json
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            periodSeconds: 5
            failureThreshold: 36 # 3 minutes to start
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
            periodSeconds: 10
            failureThreshold: 3
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            periodSeconds: 10
            failureThreshold: 3
            timeoutSeconds: 5
      volumes:
        {{- include "loculus.configVolume" (dict "name" "querulus-config" "configmap" (printf "querulus-config-%s" $key)) | nindent 8 }}
{{- end }}
{{- end }}
