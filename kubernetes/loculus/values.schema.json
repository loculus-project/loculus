{
  "title": "values.yaml Schema for the Loculus Helm Chart",
  "description": "Also has 'groups' and 'placeholder' keys in some places, which are used during docs generation. You can set 'docsIncludePrefix' to false to cut off a path when generating docs. Have a look at the SchemaDocs.astro component in the Loculus docs.",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "metadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "groups": ["metadata"],
          "type": "string",
          "description": "Key used across app to refer to this field."
        },
        "displayName": {
          "groups": ["metadata"],
          "type": "string",
          "description": "Name displayed to users."
        },
        "type": {
          "groups": ["metadata"],
          "type": "string",
          "enum": ["string", "int", "float", "number", "date", "boolean", "authors"],
          "default": "string"
        },
        "header": {
          "groups": ["metadata"],
          "type": "string",
          "description": "Grouping of fields in sequence details UI."
        },
        "required": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "Whether the field is required by backend."
        },
        "desired": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "Whether the field is a desired input field for submitters."
        },
        "definition": {
          "groups": ["metadata"],
          "type": "string",
          "description": "Definition of input field for submitters."
        },
        "guidance": {
          "groups": ["metadata"],
          "type": "string",
          "description": "Guidance for submitters on filling in input field."
        },
        "noInput": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "Whether a field with this name is expected as possible input, and so should be included in the metadata template and as a form field. (If set to true it will not be included)."
        },
        "notSearchable": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "If true, disable search for this field."
        },
        "generateIndex": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "Whether the field should be indexed for search. This is only allowed for string fields and facilitates faster filters. It is recommended if the number of different values is rather small."
        },
        "columnWidth": {
          "groups": ["metadata"],
          "type": "number",
          "description": "The minimum column width for this field on the search table."
        },
        "truncateColumnDisplayTo": {
          "groups": ["metadata"],
          "type": "number",
          "description": "The number of characters to truncate the column content to."
        },
        "order": {
          "groups": ["metadata"],
          "type": "number",
          "description": "Order for the column in the search table, lower first."
        },
        "autocomplete": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "Whether autocomplete should be offered for the field. This is only allowed for string fields and probably `generateIndex` should be true."
        },
        "options": {
          "groups": ["metadata"],
          "type": "array",
          "description": "An array of options for the value of this field, when it is an input field.",
          "placeholder": "option",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "groups": ["metadata"],
                "type": "string",
                "description": "The name of the option."
              }
            }
          }
        },
        "enableSubstringSearch": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "If true, search results will contain results that contain the given value as a substring. If false (the default), only exact matches will be returned. This only works for string fields, and you cannot also enable `autocomplete`."
        },
        "rangeSearch": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "If true, enables range search for numeric fields."
        },
        "rangeOverlapSearch": {
          "groups": ["metadata"],
          "type": "object",
          "additionalProperties": false,
          "description": "Config settings for enabling range overlap search.",
          "properties": {
            "rangeName": {
              "groups": ["metadata"],
              "type": "string",
              "description": "The range that this field belongs to. Two fields (the upper and lower bound) need to be defined with the same range ID."
            },
            "rangeDisplayName": {
              "groups": ["metadata"],
              "type": "string",
              "description": "The display name of the range."
            },
            "bound": {
              "groups": ["metadata"],
              "type": "string",
              "enum": ["lower", "upper"],
              "description": "Whether this field is the lower or upper bound of the range."
            }
          }
        },
        "initiallyVisible": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "If true, the field is initially visible in the UI."
        },
        "hideOnSequenceDetailsPage": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "If true, hides the field on the sequence details page."
        },
        "hideInSearchResultsTable": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "If true, hides the field in the search results table (and makes it impossible to show)."
        },
        "includeInDownloadsByDefault": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "Whether this field should be included in metadata downloads by default."
        },
        "perSegment": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "Whether this is a metadata field that should exist for each segment. If so fields will be created as fieldName_A, fieldName_B in the case of an organism with segments A and B."
        },
        "oneHeader": {
          "groups": ["metadata"],
          "type": "boolean",
          "description": "For segmented fields, whether this field should be grouped by segment or not."
        },
        "customDisplay": {
          "groups": ["metadata"],
          "type": "object",
          "description": "Custom display settings for the field on the sequence details page.",
          "properties": {
            "type": {
              "groups": ["metadata"],
              "type": "string"
            },
            "url": {
              "groups": ["metadata"],
              "type": "string"
            }
          }
        },
        "ontology_id": {
          "groups": ["metadata"],
          "type": "string"
        },
        "example": {
          "groups": ["metadata"],
          "type": ["string", "number"],
          "description": "Example value for the field."
        },
        "ingest": {
          "groups": ["metadata"],
          "type": "string",
          "description": "Which NCBI field to map to this field."
        },
        "preprocessing": {
          "groups": ["metadata"],
          "type": "object",
          "description": "The values of this field will be added to the preprocessing pipeline config file and the available values depend on the chosen pipeline. For the Nextclade pipeline, please see [here](https://github.com/loculus-project/loculus/blob/main/preprocessing/nextclade/README.md#custom-preprocessing-functions)."
        },
        "lineageSystem": {
          "groups": ["metadata"],
          "type": "string",
          "description": "Use this on string fields that contain lineages, if you want to enable searches that can include sublineages. The value needs to be a lineage system that is defined under the `lineageSystemDefinitions` key."
        }
      },
      "required": ["name"]
    },
    "organism": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schema": {
          "groups": ["organism"],
          "docsIncludePrefix": false,
          "type": "object",
          "description": "Object of type [organism schema](#schema-type)",
          "properties": {
            "organismName": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "string",
              "description": "Display name for the organism"
            },
            "image": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "string",
              "description": "URL to an image that will be shown on the landing page"
            },
            "loadSequencesAutomatically": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "boolean",
              "default": true,
              "description": "Whether sequences be loaded automatically on the sequence details page , rather than users having to press a button to do so. (For small genomes, this should probably be true.)"
            },
            "submissionDataTypes": {
              "docsIncludePrefix": false,
              "type": "object",
              "properties": {
                "consensusSequences": {
                  "groups": ["schema"],
                  "type": "boolean",
                  "default": true,
                  "description": "If false, the submission form will not allow submission of consensus sequences (i.e. the sequences file must be omitted). All consensus sequence related parts on the website will be hidden."
                }
              }
            },
            "description": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "string"
            },
            "metadata": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "array",
              "description": "Array of [Metadata fields (type)](#metadata-type) associated with the organism.",
              "items": { "$ref": "#/definitions/metadata" }
            },
            "metadataTemplate": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "array",
              "description": "Array of strings. Which input fields to add to the downloadable metadata template on the submission and revision page.",
              "items": {
                "type": "string"
              }
            },
            "richFastaHeaderFields": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "array",
              "description": "Which metadata fields to include in the fasta header when downloading sequences from the website when using the 'Display name' FASTA header style option.",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "earliestReleaseDate": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "object",
              "description": "Configuration object for enabling and configuring the `earliestReleaseDate` metadata field. For each version of an accession, the `earliestReleaseDate` is calculated as the earliest date of the internal release date, the dates in the configured `externalFields` and the value from the previous version of the accession (if there is one). This can be used when having a mix of sequences imported from other databases, as well as sequences released first in this Loculus instance, to have a field that shows the earliest release date regardless of where the sequence was first released.",
              "properties": {
                "enabled": {
                  "groups": ["schema"],
                  "type": "boolean",
                  "description": "Whether to enable the `earliestReleaseDate` metadata field."
                },
                "externalFields": {
                  "groups": ["schema"],
                  "type": "array",
                  "description": "Field names to use when calculating the earliest release date. The fields need to be nullable strings formated with `yyyy-mm-dd`.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "website": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "object",
              "description": "Configuration for how the organism data is displayed on the website",
              "additionalProperties": false,
              "properties": {
                "tableColumns": {
                  "groups": ["schema"],
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Columns to display in the browse table"
                },
                "defaultOrderBy": {
                  "groups": ["schema"],
                  "type": "string",
                  "description": "Default column to sort the browse table"
                },
                "defaultOrder": {
                  "groups": ["schema"],
                  "type": "string",
                  "enum": ["ascending", "descending"],
                  "description": "Default order direction."
                }
              }
            },
            "silo": {
              "groups": ["schema"],
              "docsIncludePrefix": false,
              "type": "object",
              "description": "Configuration regarding the SILO database engine",
              "additionalProperties": false,
              "properties": {
                "dateToSortBy": {
                  "groups": ["schema"],
                  "type": "string",
                  "description": "Name of a field of type date. This might speed up date range searches on this field and improve sequence compression."
                },
                "partitionBy": {
                  "groups": ["schema"],
                  "type": "string"
                }
              }
            }
          },
          "required": ["organismName"]
        },
        "preprocessing": {
          "groups": ["organism"],
          "docsIncludePrefix": false,
          "type": "array",
          "description": "Array of [Preprocessing (type)](#preprocessing-type).",
          "additionalProperties": false,
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "version": {
                "groups": ["preprocessing"],
                "docsIncludePrefix": false,
                "type": "integer",
                "minimum": 1,
                "description": "Version of the preprocessing pipeline."
              },
              "image": {
                "groups": ["preprocessing"],
                "docsIncludePrefix": false,
                "type": "string",
                "description": "Docker image for the preprocessing pipeline."
              },
              "replicas": {
                "groups": ["preprocessing"],
                "docsIncludePrefix": false,
                "type": "number",
                "description": "How many replicas of the prepreprocessing pipeline to run."
              },
              "args": {
                "groups": ["preprocessing"],
                "docsIncludePrefix": false,
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of Strings. Arguments passed to the preprocessing pipeline."
              },
              "configFile": {
                "groups": ["preprocessing"],
                "docsIncludePrefix": false,
                "type": "object",
                "description": "Object of type [ConfigFile](#nextclade-preprocessing-pipeline-configfile-type), Fields that should be added to the preprocessing pipeline config file.",
                "properties": {
                    "alignment_requirement": {
                      "groups": ["nextcladePipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "string",
                      "enum": ["ALL", "ANY"],
                      "description": "If multi-segmented viruses should require ALL segments align or ANY segment aligns"
                    },
                    "nextclade_dataset_server": {
                      "groups": ["nextcladePipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "string"
                    },
                    "nextclade_dataset_name": {
                      "groups": ["nextcladePipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "string",
                      "description": "Required if sequences should be aligned"
                    }
                  }
              }
            },
            "required": ["version", "image"]
          }
        },
        "ingest": {
          "groups": ["organism"],
          "docsIncludePrefix": false,
          "type": "object",
          "description": "Object of type [Ingest](#ingest-type)",
          "additionalProperties": false,
          "properties": {
            "image": {
              "groups": ["ingest"],
              "docsIncludePrefix": false,
              "type": "string",
              "default": "ghcr.io/loculus-project/ingest",
              "description": "Docker image for the ingest pipeline"
            },
            "configFile": {
              "groups": ["ingest"],
              "docsIncludePrefix": false,
              "type": "object",
              "description": "Object of type [ConfigFile](#ingest-configfile-type), Fields that should be added to the ingest pipeline config file",
              "properties": {
                "taxon_id": {
                  "groups": ["ingest"],
                  "docsIncludePrefix": false,
                  "type": "integer",
                  "description": "NCBI taxon ID for the organism"
                },
                "segment_identification": {
                  "groups": ["ingest"],
                  "docsIncludePrefix": false,
                  "type": "object",
                  "description": "If multi-segmented organism, how to identify segments",
                  "properties": {
                    "method": {
                      "groups": ["ingestPipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "string",
                      "enum": ["align", "minimizer"],
                      "description": "Method to identify segments, uses either nextclade align or nextclade sort"
                    },
                    "nextclade_dataset_server": {
                      "groups": ["ingestPipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "string"
                    },
                    "nextclade_dataset_name": {
                      "groups": ["ingestPipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "string",
                      "description": "Required if method is align"
                    },
                    "minimizer_parser": {
                      "groups": ["ingestPipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "array",
                      "description": "Required if method is minimizer, list of the name of each '_' - separated metadata field in the minimizer index"
                    },
                    "minimizer_index": {
                      "groups": ["ingestPipelineConfigFile"],
                      "docsIncludePrefix": false,
                      "type": "string",
                      "description": "Required if method is minimizer"
                    }
                  },
                  "required": ["method"]
                },
                "grouping_override": {
                  "groups": ["ingest"],
                  "docsIncludePrefix": false,
                  "type": "string",
                  "description": "If multi-segmented organism, segment grouping overrides"
                },
                "metadata_filter": {
                  "groups": ["ingest"],
                  "docsIncludePrefix": false,
                  "type": "object",
                  "description": "Filter ingested sequences based on value in metadata. Filter should be a list of metadata field and value pairs."
                }
              },
              "required": ["taxon_id"]
            }
          }
        },
        "enaDeposition": {
          "type": "object",
          "description": "TODO"
        },
        "referenceGenomes": {
          "docsIncludePrefix": false,
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "nucleotideSequences": {
              "groups": ["organism"],
              "type": "array",
              "description": "Array of [Nucleotide sequence (type)](#nucleotidesequence-type)",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "groups": ["nucleotide-sequence"],
                    "docsIncludePrefix": false,
                    "type": "string",
                    "description": "Name of the sequence"
                  },
                  "sequence": {
                    "groups": ["nucleotide-sequence"],
                    "docsIncludePrefix": false,
                    "type": "string"
                  },
                  "insdcAccessionFull": {
                    "groups": ["nucleotide-sequence"],
                    "docsIncludePrefix": false,
                    "type": "string",
                    "description": "INSDC accession of the sequence"
                  }
                },
                "required": ["name", "sequence"]
              }
            },
            "genes": {
              "groups": ["organism"],
              "type": "array",
              "description": "Array of [Gene (type)](#gene-type)",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "groups": ["gene"],
                    "docsIncludePrefix": false,
                    "type": "string",
                    "description": "Name of the sequence."
                  },
                  "sequence": {
                    "groups": ["gene"],
                    "docsIncludePrefix": false,
                    "type": "string"
                  }
                },
                "required": ["name", "sequence"]
              }
            }
          }
        }
      },
      "required": ["schema"]
    },
    "resourceSpec": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "requests": {
          "type": "object",
          "properties": {
            "memory": { "type": "string" },
            "cpu": { "type": "string" }
          }
        },
        "limits": {
          "type": "object",
          "properties": {
            "memory": { "type": "string" },
            "cpu": { "type": "string" }
          }
        }
      }
    } 
  },
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "name": {
      "groups": ["general"],
      "type": "string",
      "default": "Loculus",
      "description": "The name of the Loculus instance"
    },
    "logo": {
      "groups": ["general"],
      "type": "object",
      "additionalProperties": false,
      "description": "Configuration for the logo",
      "properties": {
        "url": {
          "groups": ["general"],
          "type": "string",
          "description": "URL path to the logo image file"
        },
        "width": {
          "groups": ["general"],
          "type": "integer",
          "default": 100,
          "description": "Width of the logo in pixels"
        },
        "height": {
          "groups": ["general"],
          "type": "integer",
          "default": 100,
          "description": "Height of the logo in pixels"
        }
      }
    },
    "accessionPrefix": {
      "groups": ["general"],
      "group": "general",
      "type": "string",
      "default": "LOC_",
      "description": "Prefix used for accession numbers"
    },
    "environment": {
      "groups": ["general"],
      "type": "string",
      "enum": ["local", "server"],
      "default": "server",
      "description": "Deployment environment. local for development, server for production"
    },
    "host": {
      "groups": ["general"],
      "type": "string",
      "description": "Hostname where Loculus will be accessible"
    },
    "bannerMessage": {
      "groups": ["general"],
      "type": "string",
      "default": "This is a demonstration environment. It may contain non-accurate test data and should not be used for real-world applications. Data will be deleted regularly.",
      "description": "Banner message (as HTML) to display at the very top of the page"
    },
    "welcomeMessageHTML": {
      "groups": ["general"],
      "type": ["string", "null"],
      "description": "A custom welcome message to be shown on the landing page"
    },
    "additionalHeadHTML": {
      "groups": ["general"],
      "type": "string",
      "description": "Additional HTML to inject into the <head> of pages"
    },
    "createTestAccounts": {
      "groups": ["general"],
      "type": "boolean",
      "description": "If true, creates the users testuser and superuser"
    },
    "robotsNoindexHeader": {
      "groups": ["general"],
      "type": "boolean",
      "description": "If true, adds a noindex header to prevent search engine indexing"
    },
    "seqSets": {
      "groups": ["general"],
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "groups": ["general"],
          "type": "boolean",
          "description": "Enable/disable SeqSets. If false, `seqSets.crossRef` can be omitted."
        },
        "crossRef": {
          "groups": ["general"],
          "type": "object",
          "additionalProperties": false,
          "description": "Configuration for CrossRef integration. Set to `null` to disable CrossRef integration (you can still use SeqSets without CrossRef DOIs).",
          "properties": {
            "DOIPrefix": {
              "groups": ["general"],
              "type": "string",
              "description": "The DOI prefix for SeqSets"
            },
            "endpoint": {
              "groups": ["general"],
              "type": "string",
              "description": "The API endpoint for CrossRef"
            },
            "databaseName": {
              "groups": ["general"],
              "type": "string",
              "description": "The database name for CrossRef"
            },
            "email": {
              "groups": ["general"],
              "type": "string",
              "format": "email",
              "description": "The email address associated with the CrossRef account"
            },
            "organization": {
              "groups": ["general"],
              "type": "string",
              "description": "The organization name for CrossRef"
            },
            "hostUrl": {
              "groups": ["general"],
              "type": "string",
              "description": "The host URL for CrossRef callbacks"
            }
          }
        }
      }
    },
    "gitHubMainUrl": {
      "groups": ["general"],
      "type": "string",
      "default": "https://github.com/loculus-project/loculus",
      "description": "The link that the GitHub icon in the footer points to"
    },
    "sequenceFlagging": {
      "type": "object",
      "properties": {
        "github": {
          "groups": ["general"],
          "description": "Settings to enable sequence reporting via GitHub. If set, a button will be enabled on sequence details views to report issues with a sequence.",
          "type": "object",
          "properties": {
            "organization": {
              "group": ["general"],
              "type": "string",
              "description": "A github organization or username."
            },
            "repository": {
              "group": ["general"],
              "type": "string",
              "description": "A github repository belonging to the given organization."
            },
            "issueTemplate": {
              "group": ["general"],
              "type": "string",
              "description": "An optional issuetemplate to use."
            }
          },
          "required": ["organization", "repository"],
          "additionalProperties": false
        }
      },
      "required": ["github"],
      "additionalProperties": false
    },
    "website": {
      "groups": ["website"],
      "type": "object",
      "description": "Website specific setting",
      "properties": {
        "websiteConfig": {
          "groups": ["website"],
          "type": "object",
          "additionalProperties": false,
          "description": "Settings for the `website_config.json`",
          "properties": {
            "enableLoginNavigationItem": {
              "groups": ["website"],
              "type": "boolean",
              "default": true,
              "description": "Whether the website should show the login button."
            },
            "enableSubmissionNavigationItem": {
              "groups": ["website"],
              "type": "boolean",
              "default": true,
              "description": "Whether the website should show \"Submit\" link in the top navigation bar."
            },
            "enableSubmissionPages": {
              "groups": ["website"],
              "type": "boolean",
              "default": true,
              "description": "Whether to completely disable submission related pages. Setting this to false is useful when hosting Loculus for analysis-only purposes."
            }
          }
        },
        "runtimeConfig": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "public": {
              "groups": ["website"],
              "type": "object",
              "description": "Settings for the `public` section of the `runtime_config.json`",
              "properties": {
                "backendUrl": {
                  "groups": ["website"],
                  "type": "string",
                  "description": "Overwrite the URL where the client-side website code expects the Loculus backend"
                },
                "keycloakUrl": {
                  "groups": ["website"],
                  "type": "string",
                  "description": "Overwrite the URL where the client-side website code expects the Keycloak"
                },
                "lapisUrlTemplate": {
                  "groups": ["website"],
                  "type": "string",
                  "description": "Overwrite the URLs where the client-side website code expects the LAPIS instances. Must contain `%organism%` as a placeholder."
                }
              }
            }
          }
        }
      }
    },
    "auth": {
      "groups": ["auth"],
      "type": "object",
      "additionalProperties": false,
      "description": "User authentication (Keycloak settings)",
      "properties": {
        "smtp": {
          "groups": ["auth"],
          "type": "object",
          "additionalProperties": false,
          "description": "Configuration for email sending",
          "properties": {
            "host": {
              "groups": ["auth"],
              "type": "string",
              "description": "SMTP server hostname"
            },
            "port": {
              "groups": ["auth"],
              "type": "integer",
              "description": "SMTP server port"
            },
            "user": {
              "groups": ["auth"],
              "type": "string",
              "description": "SMTP username for authentication"
            },
            "replyTo": {
              "groups": ["auth"],
              "type": "string",
              "format": "email",
              "description": "Reply-to email address for sent emails"
            },
            "from": {
              "groups": ["auth"],
              "type": "string",
              "format": "email",
              "description": "From email address for sent emails"
            },
            "envelopeFrom": {
              "groups": ["auth"],
              "type": "string",
              "format": "email",
              "description": "Envelope from address for sent emails"
            }
          }
        },
        "verifyEmail": {
          "groups": ["auth"],
          "type": "boolean",
          "default": true,
          "description": "If true, requires email verification for new accounts"
        },
        "resetPasswordAllowed": {
          "groups": ["auth"],
          "type": "boolean",
          "default": true,
          "description": "If true, allows users to reset their passwords"
        },
        "registrationAllowed": {
          "groups": ["auth"],
          "type": "boolean",
          "default": true,
          "description": "If true, allows users to register new accounts in Keycloak."
        },
        "identityProviders": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "orcid": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "clientId": {
                  "groups": ["auth"],
                  "type": "string",
                  "description": "The client ID to use for ORCiD integration."
                }
              }
            }
          }
        }
      }
    },
    "insecureCookies": {
      "groups": ["auth"],
      "type": "boolean",
      "default": false,
      "description": "If true, allows insecure cookies."
    },
    "registrationMessage": {
      "groups": ["auth"],
      "type": "string",
      "default": "You must agree to the <a href='http://main.loculus.org/terms'>terms of use</a>.",
      "description": "Message displayed during user registration, typically including terms of service."
    },
    "runDevelopmentMainDatabase": {
      "groups": ["db"],
      "type": "boolean",
      "default": true,
      "description": "If true, runs a development database within the cluster."
    },
    "runDevelopmentKeycloakDatabase": {
      "groups": ["db"],
      "type": "boolean",
      "default": true,
      "description": "If true, runs a development Keycloak database within the cluster."
    },
    "developmentDatabasePersistence": {
      "groups": ["db"],
      "type": "boolean",
      "default": true,
      "description": "If true, makes the database on the argocd preview persistent."
    },
    "disableWebsite": {
      "groups": ["services"],
      "type": "boolean",
      "default": false,
      "description": "If true, disables the frontend website deployment."
    },
    "disableBackend": {
      "groups": ["services"],
      "type": "boolean",
      "default": false,
      "description": "If true, disables the backend API deployment."
    },
    "disablePreprocessing": {
      "groups": ["services"],
      "type": "boolean",
      "default": false,
      "description": "If true, disables preprocessing pipelines."
    },
    "disableIngest": {
      "groups": ["services"],
      "type": "boolean",
      "default": false,
      "description": "If true, disables ingestion services."
    },
    "disableEnaSubmission": {
      "groups": ["services"],
      "type": "boolean",
      "default": false,
      "description": "If true, disables ENA (European Nucleotide Archive) submission service."
    },
    "customWebsiteImage": {
      "groups": ["services"],
      "type": "string",
      "description": "Optional custom Docker image for the website."
    },
    "organisms": {
      "groups": ["organism-conf"],
      "type": "object",
      "description": "An object where the keys are the organism IDs and values are an [Organism (type)](#organism-type)",
      "patternProperties": {
        "^[a-z0-9-]+$": { "$ref": "#/definitions/organism" }
      }
    },
    "defaultOrganismConfig": { "$ref": "#/definitions/organism" },
    "defaultOrganisms": {
      "type": "object",
      "patternProperties": {
        "^[a-z0-9-]+$": { "$ref": "#/definitions/organism" }
      }
    },
    "lineageSystemDefinitions": {
      "groups": ["organism-conf"],
      "type": "object",
      "description": "An object where the keys are the lineage system names and values are links to lineage system definition files per pipeline version (See [Lineage system definitions](#lineage-system-definitions))",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-zA-Z0-9-]+$": {
          "groups": ["lineage-system-definitions"],
          "placeholder": "name",
          "type": "object",
          "description": "A map from pipeline versions to file URLs.",
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "groups": ["lineage-system-definitions"],
              "placeholder": "pipelineVersion",
              "type": "string",
              "format": "uri",
              "description": "The URL to the lineage defintion file for that lineage system and that pipeline version."
            }
          }
        }
      }
    },
    "enaDbName": {
      "type": "string",
      "default": "Loculus",
      "description": "TODO"
    },
    "enforceHTTPS": {
      "type": "boolean",
      "default": true,
      "description": "TODO"
    },
    "ingestLimitSeconds": {
      "type": "integer",
      "default": 1800,
      "description": "TODO"
    },
    "dataUseTerms": {
      "type": "object",
      "properties": {
        "enabled": {
          "groups": ["general"],
          "type": "boolean",
          "description": "Whether this Loculus instance handles data use terms."
        },
        "urls": {
          "type": "object",
          "properties": {
            "open": {
              "groups": ["general"],
              "type": "string",
              "description": "A URL describing the open data use terms."
            },
            "restricted": {
              "groups": ["general"],
              "type": "string",
              "description": "A URL describing the restricted data use terms."
            }
          },
          "required": ["open", "restricted"],
          "additionalProperties": false
        }
      },
      "required": ["enabled", "urls"],
      "additionalProperties": false
    },
    "subdomainSeparator": {
      "type": "string",
      "default": "-"
    },
    "getSubmissionListLimitSeconds": {
      "type": "integer",
      "default": 600
    },
    "replicas": {
      "type": "object",
      "properties": {
        "website": {
          "type": "integer",
          "description": "Number of replicas for the website deployment",
          "default": 1
        },
        "backend": {
          "type": "integer",
          "description": "Number of replicas for the backend deployment",
          "default": 1
        },
        "lapis": {
          "type": "integer",
          "description": "Number of replicas for the LAPIS deployment",
          "default": 1
        }
      },
      "additionalProperties": false
    },
    "preprocessingTimeout": {
      "type": "integer",
      "description": "TODO",
      "default": 600
    },
    "enaUniqueSuffix": {
      "type": "string",
      "description": "TODO",
      "default": "Loculus"
    },
    "enaIsBroker": {
      "type": "boolean",
      "description": "TODO",
      "default": false
    },
    "submitToEnaProduction": {
      "type": "boolean",
      "description": "TODO",
      "default": false
    },
    "images": {
      "type": "object",
      "properties": {
        "lapisSilo": {
          "type": "string",
          "description": "TODO",
          "default": "ghcr.io/genspectrum/lapis-silo:0.5.2"
        },
        "lapis": {
          "type": "string",
          "description": "TODO",
          "default": "ghcr.io/genspectrum/lapis:0.3.13"
        }
      },
      "additionalProperties": false
    },
    "registrationTermsMessage": {
      "type": "string",
      "description": "TODO",
      "default": "You must agree to the <a href=\"http://main.loculus.org/terms\">terms of use</a>."
    },
    "siloImportLimitSeconds": {
      "type": "integer",
      "description": "TODO",
      "default": 3600
    },
    "gitHubEditLink": {
      "type": "string",
      "description": "TODO",
      "default": "https://github.com/loculus-project/loculus/edit/main/monorepo/website/"
    },
    "defaultResources": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "object",
          "properties": {
            "memory": { "type": "string" },
            "cpu": { "type": "string" }
          },
          "additionalProperties": false
        },
        "limits": {
          "type": "object",
          "properties": {
            "memory": { "type": "string" },
            "cpu": { "type": "string" }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "resources": {
      "type": "object",
      "properties": {
        "website": { "$ref": "#/definitions/resourceSpec" },
        "docs": { "$ref": "#/definitions/resourceSpec" },
        "ena-submission": { "$ref": "#/definitions/resourceSpec" },
        "ena-submission-list-cronjob": { "$ref": "#/definitions/resourceSpec" },
        "ingest": { "$ref": "#/definitions/resourceSpec" },
        "keycloak": { "$ref": "#/definitions/resourceSpec" },
        "silo": { "$ref": "#/definitions/resourceSpec" },
        "lapis": { "$ref": "#/definitions/resourceSpec" },
        "silo-preprocessing": { "$ref": "#/definitions/resourceSpec" },
        "backend": { "$ref": "#/definitions/resourceSpec" },
        "preprocessing": { "$ref": "#/definitions/resourceSpec" },
        "organismSpecific": {
          "type": "object",
          "patternProperties": {
              ".*": {
                  "type": "object",
                  "properties": {
                      "website": { "$ref": "#/definitions/resourceSpec" },
                      "ena-submission": { "$ref": "#/definitions/resourceSpec" },
                      "ena-submission-list-cronjob": { "$ref": "#/definitions/resourceSpec" },
                      "ingest": { "$ref": "#/definitions/resourceSpec" },
                      "keycloak": { "$ref": "#/definitions/resourceSpec" },
                      "silo": { "$ref": "#/definitions/resourceSpec" },
                      "lapis": { "$ref": "#/definitions/resourceSpec" },
                      "silo-preprocessing": { "$ref": "#/definitions/resourceSpec" },
                      "backend": { "$ref": "#/definitions/resourceSpec" },
                      "preprocessing": { "$ref": "#/definitions/resourceSpec" }
                  },
                  "additionalProperties": false
              }
          },
          "additionalProperties": false
        }
      }
    },
    "secrets": {
      "description": "TODO"
    },
    "backendExtraArgs": {
      "type": "array",
      "description": "TODO",
      "items": {
          "type": "string"
      }
    },
    "previewDocs": {
      "description": "TODO"
    },
    "reduceResourceRequest": {
      "description": "TODO"
    },
    "ingest": {
      "type": "object",
      "properties": {
        "ncbiGatewayUrl": {
          "type": ["string", "null"]
        },
        "mirrorBucket": {
          "type": ["string", "null"],
          "description": "Specifies the location of the public mirrored NCBI datasets bucket, where data is stored in the format {TAXON_ID}.zip. If provided with any non-null string, this setting takes priority over ncbiGatewayUrl."
        }
      },
      "additionalProperties": false
    },
    "branch": {
      "type": ["string", "integer"],
      "description": "TODO"
    },
    "sha": {
      "type": ["string", "integer"],
      "description": "TODO"
    },
    "shortbranch": {
      "type": ["string", "integer"],
      "description": "TODO - this is required/set by ArgoCD"
    },
    "podPriorityClassName": {
      "type": "string",
      "description": "TODO - found in PPX production.yaml"
    },
    "testconfig": {
      "description": "TODO"
    }
  },
  "required": ["name"]
}
